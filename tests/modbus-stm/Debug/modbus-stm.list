
modbus-stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a2c  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08003b64  08003b64  00013b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e48  08003e48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e48  08003e48  00013e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e50  08003e50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e50  08003e50  00013e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e54  08003e54  00013e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08003e64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003e64  00020154  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f367  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f7  00000000  00000000  0002f39d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb0  00000000  00000000  00031598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  00032548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192b1  00000000  00000000  00033430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5bd  00000000  00000000  0004c6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d6bb  00000000  00000000  0005ac9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8359  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004090  00000000  00000000  000f83ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08003b4c 	.word	0x08003b4c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08003b4c 	.word	0x08003b4c

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800048c:	f023 0218 	bic.w	r2, r3, #24
 8000490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4313      	orrs	r3, r2
 8000498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr

080004a6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a6:	b480      	push	{r7}
 80004a8:	b085      	sub	sp, #20
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4313      	orrs	r3, r2
 80004bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4013      	ands	r3, r2
 80004c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ca:	68fb      	ldr	r3, [r7, #12]
}
 80004cc:	bf00      	nop
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
	...

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b0a2      	sub	sp, #136	; 0x88
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fe69 	bl	80011b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f843 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f933 	bl	8000750 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 f8e5 	bl	80006b8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80004ee:	f000 f897 	bl	8000620 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Control variables for Modbus polling frequency
  uint32_t then = 0, now = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80004f8:	2300      	movs	r3, #0
 80004fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  int state = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  // Initialize the indicator LED to low
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000502:	2200      	movs	r2, #0
 8000504:	2120      	movs	r1, #32
 8000506:	4816      	ldr	r0, [pc, #88]	; (8000560 <main+0x88>)
 8000508:	f001 f90c 	bl	8001724 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // Get the current time
    now = HAL_GetTick();
 800050c:	f000 febe 	bl	800128c <HAL_GetTick>
 8000510:	67f8      	str	r0, [r7, #124]	; 0x7c
  
    // Send requests at a certain frequency
    if (now - then >= POLLING_FREQ_MS) {
 8000512:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000514:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800051e:	d3f5      	bcc.n	800050c <main+0x34>
      // Toggle the indicator LED at the Modbus polling frequency, for verification purposes
      if (state == 0) {
 8000520:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000524:	2b00      	cmp	r3, #0
 8000526:	d108      	bne.n	800053a <main+0x62>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000528:	2200      	movs	r2, #0
 800052a:	2120      	movs	r1, #32
 800052c:	480c      	ldr	r0, [pc, #48]	; (8000560 <main+0x88>)
 800052e:	f001 f8f9 	bl	8001724 <HAL_GPIO_WritePin>
        state = 1;
 8000532:	2301      	movs	r3, #1
 8000534:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000538:	e007      	b.n	800054a <main+0x72>
      }
      else {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800053a:	2201      	movs	r2, #1
 800053c:	2120      	movs	r1, #32
 800053e:	4808      	ldr	r0, [pc, #32]	; (8000560 <main+0x88>)
 8000540:	f001 f8f0 	bl	8001724 <HAL_GPIO_WritePin>
        state = 0;
 8000544:	2300      	movs	r3, #0
 8000546:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      then = now;
 800054a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800054c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      /****** Add Modbus requests to send at the polling frequency ******/
      ForwardVolume(&mb_handler, &huart1, &huart2, 32);
 8000550:	4638      	mov	r0, r7
 8000552:	2320      	movs	r3, #32
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <main+0x8c>)
 8000556:	4904      	ldr	r1, [pc, #16]	; (8000568 <main+0x90>)
 8000558:	f000 fce2 	bl	8000f20 <ForwardVolume>
    now = HAL_GetTick();
 800055c:	e7d6      	b.n	800050c <main+0x34>
 800055e:	bf00      	nop
 8000560:	48000400 	.word	0x48000400
 8000564:	200000bc 	.word	0x200000bc
 8000568:	20000028 	.word	0x20000028

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b09a      	sub	sp, #104	; 0x68
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2248      	movs	r2, #72	; 0x48
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f003 fade 	bl	8003b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]
 8000590:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000592:	f001 f8df 	bl	8001754 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000596:	2000      	movs	r0, #0
 8000598:	f7ff ff70 	bl	800047c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	4b1f      	ldr	r3, [pc, #124]	; (800061c <SystemClock_Config+0xb0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005a4:	4a1d      	ldr	r2, [pc, #116]	; (800061c <SystemClock_Config+0xb0>)
 80005a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <SystemClock_Config+0xb0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005b8:	2324      	movs	r3, #36	; 0x24
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005bc:	2381      	movs	r3, #129	; 0x81
 80005be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005c0:	2301      	movs	r3, #1
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005c4:	2300      	movs	r3, #0
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80005c8:	23b0      	movs	r3, #176	; 0xb0
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fb67 	bl	8001ca8 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005e0:	f000 f8e2 	bl	80007a8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80005e4:	234f      	movs	r3, #79	; 0x4f
 80005e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2102      	movs	r1, #2
 8000602:	4618      	mov	r0, r3
 8000604:	f001 fed2 	bl	80023ac <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800060e:	f000 f8cb 	bl	80007a8 <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3768      	adds	r7, #104	; 0x68
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	58000400 	.word	0x58000400

08000620 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 8000626:	4a23      	ldr	r2, [pc, #140]	; (80006b4 <MX_USART1_UART_Init+0x94>)
 8000628:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800062a:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 800062c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000630:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 800065e:	2200      	movs	r2, #0
 8000660:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 8000664:	2200      	movs	r2, #0
 8000666:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000668:	4811      	ldr	r0, [pc, #68]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 800066a:	f002 fb7c 	bl	8002d66 <HAL_UART_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000674:	f000 f898 	bl	80007a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000678:	2100      	movs	r1, #0
 800067a:	480d      	ldr	r0, [pc, #52]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 800067c:	f003 f971 	bl	8003962 <HAL_UARTEx_SetTxFifoThreshold>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000686:	f000 f88f 	bl	80007a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800068a:	2100      	movs	r1, #0
 800068c:	4808      	ldr	r0, [pc, #32]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 800068e:	f003 f9a6 	bl	80039de <HAL_UARTEx_SetRxFifoThreshold>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000698:	f000 f886 	bl	80007a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <MX_USART1_UART_Init+0x90>)
 800069e:	f003 f928 	bl	80038f2 <HAL_UARTEx_DisableFifoMode>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006a8:	f000 f87e 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000028 	.word	0x20000028
 80006b4:	40013800 	.word	0x40013800

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006be:	4a23      	ldr	r2, [pc, #140]	; (800074c <MX_USART2_UART_Init+0x94>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006c2:	4b21      	ldr	r3, [pc, #132]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b1d      	ldr	r3, [pc, #116]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b19      	ldr	r3, [pc, #100]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	4b16      	ldr	r3, [pc, #88]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <MX_USART2_UART_Init+0x90>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000700:	4811      	ldr	r0, [pc, #68]	; (8000748 <MX_USART2_UART_Init+0x90>)
 8000702:	f002 fb30 	bl	8002d66 <HAL_UART_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800070c:	f000 f84c 	bl	80007a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000710:	2100      	movs	r1, #0
 8000712:	480d      	ldr	r0, [pc, #52]	; (8000748 <MX_USART2_UART_Init+0x90>)
 8000714:	f003 f925 	bl	8003962 <HAL_UARTEx_SetTxFifoThreshold>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800071e:	f000 f843 	bl	80007a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000722:	2100      	movs	r1, #0
 8000724:	4808      	ldr	r0, [pc, #32]	; (8000748 <MX_USART2_UART_Init+0x90>)
 8000726:	f003 f95a 	bl	80039de <HAL_UARTEx_SetRxFifoThreshold>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000730:	f000 f83a 	bl	80007a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000734:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_USART2_UART_Init+0x90>)
 8000736:	f003 f8dc 	bl	80038f2 <HAL_UARTEx_DisableFifoMode>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000740:	f000 f832 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	200000bc 	.word	0x200000bc
 800074c:	40004400 	.word	0x40004400

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000764:	2004      	movs	r0, #4
 8000766:	f7ff fe9e 	bl	80004a6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2002      	movs	r0, #2
 800076c:	f7ff fe9b 	bl	80004a6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000770:	2001      	movs	r0, #1
 8000772:	f7ff fe98 	bl	80004a6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	2120      	movs	r1, #32
 800077a:	480a      	ldr	r0, [pc, #40]	; (80007a4 <MX_GPIO_Init+0x54>)
 800077c:	f000 ffd2 	bl	8001724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000780:	2320      	movs	r3, #32
 8000782:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4619      	mov	r1, r3
 8000794:	4803      	ldr	r0, [pc, #12]	; (80007a4 <MX_GPIO_Init+0x54>)
 8000796:	f000 fe65 	bl	8001464 <HAL_GPIO_Init>

}
 800079a:	bf00      	nop
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	48000400 	.word	0x48000400

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 80007c0:	23ff      	movs	r3, #255	; 0xff
 80007c2:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 80007c4:	23ff      	movs	r3, #255	; 0xff
 80007c6:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 80007c8:	e013      	b.n	80007f2 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	781a      	ldrb	r2, [r3, #0]
 80007d2:	7bbb      	ldrb	r3, [r7, #14]
 80007d4:	4053      	eors	r3, r2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 80007da:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <crc16+0x64>)
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	4413      	add	r3, r2
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	4053      	eors	r3, r2
 80007e6:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 80007e8:	4a0c      	ldr	r2, [pc, #48]	; (800081c <crc16+0x68>)
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	4413      	add	r3, r2
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 80007f2:	887b      	ldrh	r3, [r7, #2]
 80007f4:	1e5a      	subs	r2, r3, #1
 80007f6:	807a      	strh	r2, [r7, #2]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1e6      	bne.n	80007ca <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 80007fc:	7bfb      	ldrb	r3, [r7, #15]
 80007fe:	021b      	lsls	r3, r3, #8
 8000800:	b21a      	sxth	r2, r3
 8000802:	7bbb      	ldrb	r3, [r7, #14]
 8000804:	b21b      	sxth	r3, r3
 8000806:	4313      	orrs	r3, r2
 8000808:	b21b      	sxth	r3, r3
 800080a:	b29b      	uxth	r3, r3
}
 800080c:	4618      	mov	r0, r3
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	08003b80 	.word	0x08003b80
 800081c:	08003c80 	.word	0x08003c80

08000820 <ReadNRegs>:
#include "modbus_crc.h"
#include <stdlib.h>

/****** Modbus communication functions ******/
// Read one or more holding or input registers via Modbus
void ReadNRegs(struct ModbusHandler *handler, UART_HandleTypeDef *modbus_uart, int numRegisterstoRead, int signedValueSizeinBits){
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	603b      	str	r3, [r7, #0]
    // Create Modbus PDU
	handler->TxData[0] = SLAVE_ID;  // slave address
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	2201      	movs	r2, #1
 8000832:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    // Function code
	if (ReadFromIreg == 1) handler->TxData[1] = READIREGS;
	else handler->TxData[1] = READHREGS;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	2203      	movs	r2, #3
 800083a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

	handler->TxData[2] = 0x0; // register address high byte
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	2200      	movs	r2, #0
 8000842:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	// low byte is set in the calling function

	handler->TxData[4] = 0x0; // number of registers high byte
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	2200      	movs	r2, #0
 800084a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	// number of registers low byte
	// calculated from the number of values to read and their size
	// e. g.: 1 32 bit value requires 2 registers (2 x 16 bits)
	handler->TxData[5] = numRegisterstoRead * abs(signedValueSizeinBits)/16;
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	bfb8      	it	lt
 8000854:	425b      	neglt	r3, r3
 8000856:	687a      	ldr	r2, [r7, #4]
 8000858:	fb02 f303 	mul.w	r3, r2, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	da00      	bge.n	8000862 <ReadNRegs+0x42>
 8000860:	330f      	adds	r3, #15
 8000862:	111b      	asrs	r3, r3, #4
 8000864:	b2da      	uxtb	r2, r3
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	// number of values included in slave response
	// is only 1 or 16 for Octave meters
	if (numRegisterstoRead == 16) handler->ValuesInResponse = 16;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b10      	cmp	r3, #16
 8000870:	d103      	bne.n	800087a <ReadNRegs+0x5a>
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	2210      	movs	r2, #16
 8000876:	66da      	str	r2, [r3, #108]	; 0x6c
 8000878:	e002      	b.n	8000880 <ReadNRegs+0x60>
	else handler->ValuesInResponse = 1;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	2201      	movs	r2, #1
 800087e:	66da      	str	r2, [r3, #108]	; 0x6c

	handler->signedResponseSizeinBits = signedValueSizeinBits;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	683a      	ldr	r2, [r7, #0]
 8000884:	671a      	str	r2, [r3, #112]	; 0x70

	uint16_t crc = crc16(handler->TxData, 6);
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	3325      	adds	r3, #37	; 0x25
 800088a:	2106      	movs	r1, #6
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ff91 	bl	80007b4 <crc16>
 8000892:	4603      	mov	r3, r0
 8000894:	82fb      	strh	r3, [r7, #22]
	handler->TxData[6] = crc&0xFF;   // CRC low
 8000896:	8afb      	ldrh	r3, [r7, #22]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	handler->TxData[7] = (crc>>8)&0xFF;  // CRC high
 80008a0:	8afb      	ldrh	r3, [r7, #22]
 80008a2:	0a1b      	lsrs	r3, r3, #8
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	// Flag this as a reading (not writing) operation
	handler->ReadOperation = 1;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	2201      	movs	r2, #1
 80008b2:	675a      	str	r2, [r3, #116]	; 0x74

	// Send the Modbus PDU to the slave
	HAL_UART_Transmit(modbus_uart, handler->TxData, 8, 100);
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f103 0125 	add.w	r1, r3, #37	; 0x25
 80008ba:	2364      	movs	r3, #100	; 0x64
 80008bc:	2208      	movs	r2, #8
 80008be:	68b8      	ldr	r0, [r7, #8]
 80008c0:	f002 faa1 	bl	8002e06 <HAL_UART_Transmit>
}
 80008c4:	bf00      	nop
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <ModbusReceive>:
	// Send the Modbus PDU to the slave
	HAL_UART_Transmit(modbus_uart, handler->TxData, 8, 100);
}

// Receive a Modbus response from the slave in blocking mode
void ModbusReceive(struct ModbusHandler *handler, UART_HandleTypeDef *echo_uart, UART_HandleTypeDef *modbus_uart){
 80008cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008d0:	b0c3      	sub	sp, #268	; 0x10c
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 80008d8:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80008dc:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
	if (handler->ReadOperation == 1){
 80008e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80008e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	f040 82eb 	bne.w	8000ec2 <ModbusReceive+0x5f6>
	  if (handler->signedResponseSizeinBits == s_int16){
 80008ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80008f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80008f2:	2b10      	cmp	r3, #16
 80008f4:	d173      	bne.n	80009de <ModbusReceive+0x112>
		// calculate how many bytes will be received depending on the amount of requested values
		if (handler->ValuesInResponse == 16) HAL_UART_Receive(modbus_uart, handler->RxData, 37, 100); // 100ms timeout
 80008f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80008fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80008fc:	2b10      	cmp	r3, #16
 80008fe:	d108      	bne.n	8000912 <ModbusReceive+0x46>
 8000900:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000904:	2364      	movs	r3, #100	; 0x64
 8000906:	2225      	movs	r2, #37	; 0x25
 8000908:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800090c:	f002 fb01 	bl	8002f12 <HAL_UART_Receive>
 8000910:	e007      	b.n	8000922 <ModbusReceive+0x56>
		else HAL_UART_Receive(modbus_uart, handler->RxData, 7, 100); // 100ms timeout
 8000912:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000916:	2364      	movs	r3, #100	; 0x64
 8000918:	2207      	movs	r2, #7
 800091a:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800091e:	f002 faf8 	bl	8002f12 <HAL_UART_Receive>

		for (int i = 0; i < handler->ValuesInResponse; i++){
 8000922:	2300      	movs	r3, #0
 8000924:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000928:	e039      	b.n	800099e <ModbusReceive+0xd2>
			// Save each of the incoming values to the buffer
			handler->int16Buffer[i] = handler->RxData[i+i+3]<<8 | handler->RxData[i+i+4];
 800092a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	3303      	adds	r3, #3
 8000932:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000936:	5cd3      	ldrb	r3, [r2, r3]
 8000938:	021b      	lsls	r3, r3, #8
 800093a:	b21a      	sxth	r2, r3
 800093c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000940:	3302      	adds	r3, #2
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000948:	5ccb      	ldrb	r3, [r1, r3]
 800094a:	b21b      	sxth	r3, r3
 800094c:	4313      	orrs	r3, r2
 800094e:	b21b      	sxth	r3, r3
 8000950:	b299      	uxth	r1, r3
 8000952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000956:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800095a:	3218      	adds	r2, #24
 800095c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			// Print the values to serial, for visualization or debugging
			HAL_UART_Transmit(echo_uart, &handler->RxData[i+i+3], 1, 100);
 8000960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	3303      	adds	r3, #3
 8000968:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800096c:	18d1      	adds	r1, r2, r3
 800096e:	2364      	movs	r3, #100	; 0x64
 8000970:	2201      	movs	r2, #1
 8000972:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8000976:	f002 fa46 	bl	8002e06 <HAL_UART_Transmit>
			HAL_UART_Transmit(echo_uart, &handler->RxData[i+i+4], 1, 100);
 800097a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800097e:	3302      	adds	r3, #2
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000986:	18d1      	adds	r1, r2, r3
 8000988:	2364      	movs	r3, #100	; 0x64
 800098a:	2201      	movs	r2, #1
 800098c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8000990:	f002 fa39 	bl	8002e06 <HAL_UART_Transmit>
		for (int i = 0; i < handler->ValuesInResponse; i++){
 8000994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000998:	3301      	adds	r3, #1
 800099a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800099e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80009a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80009a4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80009a8:	429a      	cmp	r2, r3
 80009aa:	dbbe      	blt.n	800092a <ModbusReceive+0x5e>
		}

		// Clear the unused buffers
		handler->int32Buffer = 0;
 80009ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80009b0:	2200      	movs	r2, #0
 80009b2:	655a      	str	r2, [r3, #84]	; 0x54
		handler->uint32Buffer = 0;
 80009b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80009b8:	2200      	movs	r2, #0
 80009ba:	651a      	str	r2, [r3, #80]	; 0x50
		handler->int64Buffer = 0;
 80009bc:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80009c0:	f04f 0200 	mov.w	r2, #0
 80009c4:	f04f 0300 	mov.w	r3, #0
 80009c8:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		handler->uint64Buffer = 0;
 80009cc:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80009d0:	f04f 0200 	mov.w	r2, #0
 80009d4:	f04f 0300 	mov.w	r3, #0
 80009d8:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

		// Print the values to serial, for visualization or debugging
		HAL_UART_Transmit(echo_uart, &handler->RxData[4], 1, 100);
		HAL_UART_Transmit(echo_uart, &handler->RxData[5], 1, 100);
	}
}
 80009dc:	e29a      	b.n	8000f14 <ModbusReceive+0x648>
			for (int i = 0; i < 16; i++){
 80009de:	2300      	movs	r3, #0
 80009e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80009e4:	e00d      	b.n	8000a02 <ModbusReceive+0x136>
				handler->int16Buffer[i] = 0;
 80009e6:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80009ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80009ee:	f103 0218 	add.w	r2, r3, #24
 80009f2:	2300      	movs	r3, #0
 80009f4:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
			for (int i = 0; i < 16; i++){
 80009f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80009fc:	3301      	adds	r3, #1
 80009fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000a02:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8000a06:	2b0f      	cmp	r3, #15
 8000a08:	dded      	ble.n	80009e6 <ModbusReceive+0x11a>
			if ((handler->signedResponseSizeinBits == s_uint32) | (handler->signedResponseSizeinBits == s_int32)){
 8000a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a10:	2b20      	cmp	r3, #32
 8000a12:	bf0c      	ite	eq
 8000a14:	2301      	moveq	r3, #1
 8000a16:	2300      	movne	r3, #0
 8000a18:	b2da      	uxtb	r2, r3
 8000a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a20:	f113 0f20 	cmn.w	r3, #32
 8000a24:	bf0c      	ite	eq
 8000a26:	2301      	moveq	r3, #1
 8000a28:	2300      	movne	r3, #0
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d079      	beq.n	8000b28 <ModbusReceive+0x25c>
				HAL_UART_Receive(modbus_uart, handler->RxData, 9, 100); // 100ms timeout
 8000a34:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000a38:	2364      	movs	r3, #100	; 0x64
 8000a3a:	2209      	movs	r2, #9
 8000a3c:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8000a40:	f002 fa67 	bl	8002f12 <HAL_UART_Receive>
				if (handler->signedResponseSizeinBits == s_uint32){
 8000a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a4a:	2b20      	cmp	r3, #32
 8000a4c:	d129      	bne.n	8000aa2 <ModbusReceive+0x1d6>
					handler->uint32Buffer = (uint32_t)handler->RxData[3]<<24 |
 8000a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a52:	78db      	ldrb	r3, [r3, #3]
 8000a54:	061a      	lsls	r2, r3, #24
							(uint32_t)handler->RxData[4]<<16 |
 8000a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a5a:	791b      	ldrb	r3, [r3, #4]
 8000a5c:	041b      	lsls	r3, r3, #16
					handler->uint32Buffer = (uint32_t)handler->RxData[3]<<24 |
 8000a5e:	431a      	orrs	r2, r3
							(uint32_t)handler->RxData[5]<<8 | (uint32_t)handler->RxData[6];
 8000a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a64:	795b      	ldrb	r3, [r3, #5]
 8000a66:	021b      	lsls	r3, r3, #8
							(uint32_t)handler->RxData[4]<<16 |
 8000a68:	4313      	orrs	r3, r2
							(uint32_t)handler->RxData[5]<<8 | (uint32_t)handler->RxData[6];
 8000a6a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000a6e:	7992      	ldrb	r2, [r2, #6]
 8000a70:	431a      	orrs	r2, r3
					handler->uint32Buffer = (uint32_t)handler->RxData[3]<<24 |
 8000a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a76:	651a      	str	r2, [r3, #80]	; 0x50
					handler->int32Buffer = 0;
 8000a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	655a      	str	r2, [r3, #84]	; 0x54
					handler->int64Buffer = 0;
 8000a80:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000a84:	f04f 0200 	mov.w	r2, #0
 8000a88:	f04f 0300 	mov.w	r3, #0
 8000a8c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
					handler->uint64Buffer = 0;
 8000a90:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000a94:	f04f 0200 	mov.w	r2, #0
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
 8000aa0:	e029      	b.n	8000af6 <ModbusReceive+0x22a>
					handler->int32Buffer = (uint32_t)handler->RxData[3]<<24 |
 8000aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000aa6:	78db      	ldrb	r3, [r3, #3]
 8000aa8:	061a      	lsls	r2, r3, #24
							(uint32_t)handler->RxData[4]<<16 |
 8000aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000aae:	791b      	ldrb	r3, [r3, #4]
 8000ab0:	041b      	lsls	r3, r3, #16
					handler->int32Buffer = (uint32_t)handler->RxData[3]<<24 |
 8000ab2:	431a      	orrs	r2, r3
							(uint32_t)handler->RxData[5]<<8 | (uint32_t)handler->RxData[6];
 8000ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ab8:	795b      	ldrb	r3, [r3, #5]
 8000aba:	021b      	lsls	r3, r3, #8
							(uint32_t)handler->RxData[4]<<16 |
 8000abc:	4313      	orrs	r3, r2
							(uint32_t)handler->RxData[5]<<8 | (uint32_t)handler->RxData[6];
 8000abe:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000ac2:	7992      	ldrb	r2, [r2, #6]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	461a      	mov	r2, r3
					handler->int32Buffer = (uint32_t)handler->RxData[3]<<24 |
 8000ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000acc:	655a      	str	r2, [r3, #84]	; 0x54
					handler->uint32Buffer = 0;
 8000ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	651a      	str	r2, [r3, #80]	; 0x50
					handler->int64Buffer = 0;
 8000ad6:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000ada:	f04f 0200 	mov.w	r2, #0
 8000ade:	f04f 0300 	mov.w	r3, #0
 8000ae2:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
					handler->uint64Buffer = 0;
 8000ae6:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000aea:	f04f 0200 	mov.w	r2, #0
 8000aee:	f04f 0300 	mov.w	r3, #0
 8000af2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
				for (int i = 3; i<=6; i++) HAL_UART_Transmit(echo_uart, &handler->RxData[i], 1, 100);
 8000af6:	2303      	movs	r3, #3
 8000af8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000afc:	e00f      	b.n	8000b1e <ModbusReceive+0x252>
 8000afe:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000b06:	18d1      	adds	r1, r2, r3
 8000b08:	2364      	movs	r3, #100	; 0x64
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8000b10:	f002 f979 	bl	8002e06 <HAL_UART_Transmit>
 8000b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000b18:	3301      	adds	r3, #1
 8000b1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	ddeb      	ble.n	8000afe <ModbusReceive+0x232>
}
 8000b26:	e1f5      	b.n	8000f14 <ModbusReceive+0x648>
				HAL_UART_Receive(modbus_uart, handler->RxData, 13, 100); // 100ms timeout
 8000b28:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000b2c:	2364      	movs	r3, #100	; 0x64
 8000b2e:	220d      	movs	r2, #13
 8000b30:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8000b34:	f002 f9ed 	bl	8002f12 <HAL_UART_Receive>
				if (handler->signedResponseSizeinBits == s_uint64){
 8000b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000b3e:	2b40      	cmp	r3, #64	; 0x40
 8000b40:	f040 80e4 	bne.w	8000d0c <ModbusReceive+0x440>
					handler->uint64Buffer = (uint64_t)handler->RxData[10]<<56 |
 8000b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000b48:	7a9b      	ldrb	r3, [r3, #10]
 8000b4a:	b2db      	uxtb	r3, r3
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8000b52:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	f04f 0100 	mov.w	r1, #0
 8000b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8000b62:	0619      	lsls	r1, r3, #24
 8000b64:	2000      	movs	r0, #0
							(uint64_t)handler->RxData[9]<<48 | (uint64_t)handler->RxData[8]<<40 |
 8000b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000b6a:	7a5b      	ldrb	r3, [r3, #9]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000b74:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8000b78:	f04f 0200 	mov.w	r2, #0
 8000b7c:	f04f 0300 	mov.w	r3, #0
 8000b80:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 8000b84:	0423      	lsls	r3, r4, #16
 8000b86:	2200      	movs	r2, #0
					handler->uint64Buffer = (uint64_t)handler->RxData[10]<<56 |
 8000b88:	ea40 0802 	orr.w	r8, r0, r2
 8000b8c:	ea41 0903 	orr.w	r9, r1, r3
							(uint64_t)handler->RxData[9]<<48 | (uint64_t)handler->RxData[8]<<40 |
 8000b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000b94:	7a1b      	ldrb	r3, [r3, #8]
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8000b9e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8000ba2:	f04f 0200 	mov.w	r2, #0
 8000ba6:	f04f 0300 	mov.w	r3, #0
 8000baa:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8000bae:	020b      	lsls	r3, r1, #8
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	ea48 0102 	orr.w	r1, r8, r2
 8000bb6:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8000bba:	ea49 0303 	orr.w	r3, r9, r3
 8000bbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
							(uint64_t)handler->RxData[7]<<32 | (uint64_t)handler->RxData[6]<<24 |
 8000bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000bc6:	79db      	ldrb	r3, [r3, #7]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000bd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8000bd4:	f04f 0200 	mov.w	r2, #0
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8000be0:	000b      	movs	r3, r1
 8000be2:	2200      	movs	r2, #0
							(uint64_t)handler->RxData[9]<<48 | (uint64_t)handler->RxData[8]<<40 |
 8000be4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8000be8:	4604      	mov	r4, r0
 8000bea:	4314      	orrs	r4, r2
 8000bec:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8000bf0:	4319      	orrs	r1, r3
 8000bf2:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
							(uint64_t)handler->RxData[7]<<32 | (uint64_t)handler->RxData[6]<<24 |
 8000bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000bfa:	799b      	ldrb	r3, [r3, #6]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8000c04:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8000c08:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	0a1b      	lsrs	r3, r3, #8
 8000c10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000c14:	460b      	mov	r3, r1
 8000c16:	061b      	lsls	r3, r3, #24
 8000c18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000c1c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8000c20:	4618      	mov	r0, r3
 8000c22:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8000c26:	460d      	mov	r5, r1
 8000c28:	4328      	orrs	r0, r5
 8000c2a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8000c2e:	4623      	mov	r3, r4
 8000c30:	4313      	orrs	r3, r2
 8000c32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
							(uint64_t)handler->RxData[5]<<16 | (uint64_t)handler->RxData[4]<<8 |
 8000c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c3a:	795b      	ldrb	r3, [r3, #5]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000c44:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8000c48:	f04f 0200 	mov.w	r2, #0
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8000c54:	4629      	mov	r1, r5
 8000c56:	040b      	lsls	r3, r1, #16
 8000c58:	4620      	mov	r0, r4
 8000c5a:	4629      	mov	r1, r5
 8000c5c:	4604      	mov	r4, r0
 8000c5e:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8000c62:	4601      	mov	r1, r0
 8000c64:	040a      	lsls	r2, r1, #16
							(uint64_t)handler->RxData[7]<<32 | (uint64_t)handler->RxData[6]<<24 |
 8000c66:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	4314      	orrs	r4, r2
 8000c6e:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8000c72:	4319      	orrs	r1, r3
 8000c74:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
							(uint64_t)handler->RxData[5]<<16 | (uint64_t)handler->RxData[4]<<8 |
 8000c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000c7c:	791b      	ldrb	r3, [r3, #4]
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2200      	movs	r2, #0
 8000c82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000c86:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	f04f 0300 	mov.w	r3, #0
 8000c92:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8000c96:	4629      	mov	r1, r5
 8000c98:	020b      	lsls	r3, r1, #8
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	4629      	mov	r1, r5
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8000ca4:	4601      	mov	r1, r0
 8000ca6:	020a      	lsls	r2, r1, #8
 8000ca8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8000cac:	4604      	mov	r4, r0
 8000cae:	4314      	orrs	r4, r2
 8000cb0:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
 8000cb4:	4319      	orrs	r1, r3
 8000cb6:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
							(uint64_t)handler->RxData[3];
 8000cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000cbe:	78db      	ldrb	r3, [r3, #3]
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8000cc6:	67fa      	str	r2, [r7, #124]	; 0x7c
							(uint64_t)handler->RxData[5]<<16 | (uint64_t)handler->RxData[4]<<8 |
 8000cc8:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8000ccc:	4618      	mov	r0, r3
 8000cce:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8000cd2:	460d      	mov	r5, r1
 8000cd4:	4328      	orrs	r0, r5
 8000cd6:	6738      	str	r0, [r7, #112]	; 0x70
 8000cd8:	4623      	mov	r3, r4
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	677b      	str	r3, [r7, #116]	; 0x74
					handler->uint64Buffer = (uint64_t)handler->RxData[10]<<56 |
 8000cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ce2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8000ce6:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58
					handler->int32Buffer = 0;
 8000cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	655a      	str	r2, [r3, #84]	; 0x54
					handler->uint32Buffer = 0;
 8000cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	651a      	str	r2, [r3, #80]	; 0x50
					handler->int64Buffer = 0;
 8000cfa:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000cfe:	f04f 0200 	mov.w	r2, #0
 8000d02:	f04f 0300 	mov.w	r3, #0
 8000d06:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8000d0a:	e0c1      	b.n	8000e90 <ModbusReceive+0x5c4>
					handler->int64Buffer = (uint64_t)handler->RxData[10]<<56 |
 8000d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d10:	7a9b      	ldrb	r3, [r3, #10]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2200      	movs	r2, #0
 8000d16:	66bb      	str	r3, [r7, #104]	; 0x68
 8000d18:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	f04f 0100 	mov.w	r1, #0
 8000d22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d24:	0619      	lsls	r1, r3, #24
 8000d26:	2000      	movs	r0, #0
							(uint64_t)handler->RxData[9]<<48 | (uint64_t)handler->RxData[8]<<40 |
 8000d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d2c:	7a5b      	ldrb	r3, [r3, #9]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2200      	movs	r2, #0
 8000d32:	663b      	str	r3, [r7, #96]	; 0x60
 8000d34:	667a      	str	r2, [r7, #100]	; 0x64
 8000d36:	f04f 0200 	mov.w	r2, #0
 8000d3a:	f04f 0300 	mov.w	r3, #0
 8000d3e:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 8000d40:	0433      	lsls	r3, r6, #16
 8000d42:	2200      	movs	r2, #0
					handler->int64Buffer = (uint64_t)handler->RxData[10]<<56 |
 8000d44:	ea40 0402 	orr.w	r4, r0, r2
 8000d48:	ea41 0503 	orr.w	r5, r1, r3
							(uint64_t)handler->RxData[9]<<48 | (uint64_t)handler->RxData[8]<<40 |
 8000d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d50:	7a1b      	ldrb	r3, [r3, #8]
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	2200      	movs	r2, #0
 8000d56:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d58:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000d5a:	f04f 0200 	mov.w	r2, #0
 8000d5e:	f04f 0300 	mov.w	r3, #0
 8000d62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000d64:	020b      	lsls	r3, r1, #8
 8000d66:	2200      	movs	r2, #0
 8000d68:	ea44 0a02 	orr.w	sl, r4, r2
 8000d6c:	ea45 0b03 	orr.w	fp, r5, r3
							(uint64_t)handler->RxData[7]<<32 | (uint64_t)handler->RxData[6]<<24 |
 8000d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d74:	79db      	ldrb	r3, [r3, #7]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2200      	movs	r2, #0
 8000d7a:	653b      	str	r3, [r7, #80]	; 0x50
 8000d7c:	657a      	str	r2, [r7, #84]	; 0x54
 8000d7e:	f04f 0200 	mov.w	r2, #0
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000d88:	000b      	movs	r3, r1
 8000d8a:	2200      	movs	r2, #0
							(uint64_t)handler->RxData[9]<<48 | (uint64_t)handler->RxData[8]<<40 |
 8000d8c:	ea4a 0102 	orr.w	r1, sl, r2
 8000d90:	64b9      	str	r1, [r7, #72]	; 0x48
 8000d92:	ea4b 0303 	orr.w	r3, fp, r3
 8000d96:	64fb      	str	r3, [r7, #76]	; 0x4c
							(uint64_t)handler->RxData[7]<<32 | (uint64_t)handler->RxData[6]<<24 |
 8000d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000d9c:	799b      	ldrb	r3, [r3, #6]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2200      	movs	r2, #0
 8000da2:	643b      	str	r3, [r7, #64]	; 0x40
 8000da4:	647a      	str	r2, [r7, #68]	; 0x44
 8000da6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8000daa:	460b      	mov	r3, r1
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000db0:	460b      	mov	r3, r1
 8000db2:	061b      	lsls	r3, r3, #24
 8000db4:	63bb      	str	r3, [r7, #56]	; 0x38
 8000db6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8000dba:	4618      	mov	r0, r3
 8000dbc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8000dc0:	460d      	mov	r5, r1
 8000dc2:	4328      	orrs	r0, r5
 8000dc4:	6338      	str	r0, [r7, #48]	; 0x30
 8000dc6:	4623      	mov	r3, r4
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	637b      	str	r3, [r7, #52]	; 0x34
							(uint64_t)handler->RxData[5]<<16 | (uint64_t)handler->RxData[4]<<8 |
 8000dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000dd0:	795b      	ldrb	r3, [r3, #5]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000dda:	f04f 0200 	mov.w	r2, #0
 8000dde:	f04f 0300 	mov.w	r3, #0
 8000de2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8000de6:	4629      	mov	r1, r5
 8000de8:	040b      	lsls	r3, r1, #16
 8000dea:	4620      	mov	r0, r4
 8000dec:	4629      	mov	r1, r5
 8000dee:	4604      	mov	r4, r0
 8000df0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8000df4:	4601      	mov	r1, r0
 8000df6:	040a      	lsls	r2, r1, #16
							(uint64_t)handler->RxData[7]<<32 | (uint64_t)handler->RxData[6]<<24 |
 8000df8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	4314      	orrs	r4, r2
 8000e00:	623c      	str	r4, [r7, #32]
 8000e02:	4319      	orrs	r1, r3
 8000e04:	6279      	str	r1, [r7, #36]	; 0x24
							(uint64_t)handler->RxData[5]<<16 | (uint64_t)handler->RxData[4]<<8 |
 8000e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e0a:	791b      	ldrb	r3, [r3, #4]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	61fa      	str	r2, [r7, #28]
 8000e14:	f04f 0200 	mov.w	r2, #0
 8000e18:	f04f 0300 	mov.w	r3, #0
 8000e1c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000e20:	4629      	mov	r1, r5
 8000e22:	020b      	lsls	r3, r1, #8
 8000e24:	4620      	mov	r0, r4
 8000e26:	4629      	mov	r1, r5
 8000e28:	4604      	mov	r4, r0
 8000e2a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8000e2e:	4601      	mov	r1, r0
 8000e30:	020a      	lsls	r2, r1, #8
 8000e32:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000e36:	4604      	mov	r4, r0
 8000e38:	4314      	orrs	r4, r2
 8000e3a:	613c      	str	r4, [r7, #16]
 8000e3c:	4319      	orrs	r1, r3
 8000e3e:	6179      	str	r1, [r7, #20]
							(uint64_t)handler->RxData[3];
 8000e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e44:	78db      	ldrb	r3, [r3, #3]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	60fa      	str	r2, [r7, #12]
							(uint64_t)handler->RxData[5]<<16 | (uint64_t)handler->RxData[4]<<8 |
 8000e4e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000e52:	4618      	mov	r0, r3
 8000e54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000e58:	460d      	mov	r5, r1
 8000e5a:	4328      	orrs	r0, r5
 8000e5c:	6038      	str	r0, [r7, #0]
 8000e5e:	4623      	mov	r3, r4
 8000e60:	4313      	orrs	r3, r2
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	e9d7 2300 	ldrd	r2, r3, [r7]
					handler->int64Buffer = (uint64_t)handler->RxData[10]<<56 |
 8000e68:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000e6c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
					handler->int32Buffer = 0;
 8000e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e74:	2200      	movs	r2, #0
 8000e76:	655a      	str	r2, [r3, #84]	; 0x54
					handler->uint32Buffer = 0;
 8000e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	651a      	str	r2, [r3, #80]	; 0x50
					handler->uint64Buffer = 0;
 8000e80:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000e84:	f04f 0200 	mov.w	r2, #0
 8000e88:	f04f 0300 	mov.w	r3, #0
 8000e8c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
				for (int i = 10; i>=3; i--) HAL_UART_Transmit(echo_uart, &handler->RxData[i], 1, 100);
 8000e90:	230a      	movs	r3, #10
 8000e92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000e96:	e00f      	b.n	8000eb8 <ModbusReceive+0x5ec>
 8000e98:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8000e9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000ea0:	18d1      	adds	r1, r2, r3
 8000ea2:	2364      	movs	r3, #100	; 0x64
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8000eaa:	f001 ffac 	bl	8002e06 <HAL_UART_Transmit>
 8000eae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000eb8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	dceb      	bgt.n	8000e98 <ModbusReceive+0x5cc>
}
 8000ec0:	e028      	b.n	8000f14 <ModbusReceive+0x648>
		HAL_UART_Receive(modbus_uart, handler->RxData, 8, 100); // 100ms timeout
 8000ec2:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8000ec6:	2364      	movs	r3, #100	; 0x64
 8000ec8:	2208      	movs	r2, #8
 8000eca:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8000ece:	f002 f820 	bl	8002f12 <HAL_UART_Receive>
		handler->int16Buffer[0] = handler->RxData[4]<<8 | handler->RxData[5];
 8000ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ed6:	791b      	ldrb	r3, [r3, #4]
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ee0:	795b      	ldrb	r3, [r3, #5]
 8000ee2:	b21b      	sxth	r3, r3
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000eee:	861a      	strh	r2, [r3, #48]	; 0x30
		HAL_UART_Transmit(echo_uart, &handler->RxData[4], 1, 100);
 8000ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000ef4:	1d19      	adds	r1, r3, #4
 8000ef6:	2364      	movs	r3, #100	; 0x64
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8000efe:	f001 ff82 	bl	8002e06 <HAL_UART_Transmit>
		HAL_UART_Transmit(echo_uart, &handler->RxData[5], 1, 100);
 8000f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8000f06:	1d59      	adds	r1, r3, #5
 8000f08:	2364      	movs	r3, #100	; 0x64
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8000f10:	f001 ff79 	bl	8002e06 <HAL_UART_Transmit>
}
 8000f14:	bf00      	nop
 8000f16:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000f20 <ForwardVolume>:
	ReadNRegs(handler, modbus_uart, 1, s_int16);

	ModbusReceive(handler, echo_uart, modbus_uart);
}

void ForwardVolume(struct ModbusHandler *handler, UART_HandleTypeDef *echo_uart, UART_HandleTypeDef *modbus_uart, int unsignedValueSizeinBits){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	603b      	str	r3, [r7, #0]

	if (unsignedValueSizeinBits == 64) {
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	2b40      	cmp	r3, #64	; 0x40
 8000f32:	d10d      	bne.n	8000f50 <ForwardVolume+0x30>
		handler->LastUsed = FORWARDVOLUME_DOUBLE;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2229      	movs	r2, #41	; 0x29
 8000f38:	669a      	str	r2, [r3, #104]	; 0x68

		handler->TxData[3] = 0x18; // register address low
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2218      	movs	r2, #24
 8000f3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		ReadNRegs(handler, modbus_uart, 1, s_uint64);
 8000f42:	2340      	movs	r3, #64	; 0x40
 8000f44:	2201      	movs	r2, #1
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	68f8      	ldr	r0, [r7, #12]
 8000f4a:	f7ff fc69 	bl	8000820 <ReadNRegs>
 8000f4e:	e00c      	b.n	8000f6a <ForwardVolume+0x4a>
	}
	else { // unsignedValueSizeinBits == 32
		handler->LastUsed = FORWARDVOLUME_UINT32;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2238      	movs	r2, #56	; 0x38
 8000f54:	669a      	str	r2, [r3, #104]	; 0x68

		handler->TxData[3] = 0x36; // register address low
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2236      	movs	r2, #54	; 0x36
 8000f5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

		ReadNRegs(handler, modbus_uart, 1, s_uint32);
 8000f5e:	2320      	movs	r3, #32
 8000f60:	2201      	movs	r2, #1
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f7ff fc5b 	bl	8000820 <ReadNRegs>
	}


	ModbusReceive(handler, echo_uart, modbus_uart);
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	68b9      	ldr	r1, [r7, #8]
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f7ff fcac 	bl	80008cc <ModbusReceive>
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <LL_AHB2_GRP1_EnableClock>:
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
}
 8000fa2:	bf00      	nop
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
}
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001000:	68fb      	ldr	r3, [r7, #12]
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b096      	sub	sp, #88	; 0x58
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	2238      	movs	r2, #56	; 0x38
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f002 fd7f 	bl	8003b3c <memset>
  if(huart->Instance==USART1)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a2d      	ldr	r2, [pc, #180]	; (80010f8 <HAL_UART_MspInit+0xe0>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d126      	bne.n	8001096 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001048:	2301      	movs	r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800104c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001050:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	4618      	mov	r0, r3
 8001058:	f001 fd4a 	bl	8002af0 <HAL_RCCEx_PeriphCLKConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001062:	f7ff fba1 	bl	80007a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001066:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800106a:	f7ff ffb7 	bl	8000fdc <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	2002      	movs	r0, #2
 8001070:	f7ff ff84 	bl	8000f7c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001074:	23c0      	movs	r3, #192	; 0xc0
 8001076:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001084:	2307      	movs	r3, #7
 8001086:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001088:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800108c:	4619      	mov	r1, r3
 800108e:	481b      	ldr	r0, [pc, #108]	; (80010fc <HAL_UART_MspInit+0xe4>)
 8001090:	f000 f9e8 	bl	8001464 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001094:	e02b      	b.n	80010ee <HAL_UART_MspInit+0xd6>
  else if(huart->Instance==USART2)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a19      	ldr	r2, [pc, #100]	; (8001100 <HAL_UART_MspInit+0xe8>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d126      	bne.n	80010ee <HAL_UART_MspInit+0xd6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010a0:	2302      	movs	r3, #2
 80010a2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010a4:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80010a8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 fd1e 	bl	8002af0 <HAL_RCCEx_PeriphCLKConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_UART_MspInit+0xa6>
      Error_Handler();
 80010ba:	f7ff fb75 	bl	80007a8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010be:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80010c2:	f7ff ff73 	bl	8000fac <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2001      	movs	r0, #1
 80010c8:	f7ff ff58 	bl	8000f7c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80010cc:	230c      	movs	r3, #12
 80010ce:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010dc:	2307      	movs	r3, #7
 80010de:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010e4:	4619      	mov	r1, r3
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ea:	f000 f9bb 	bl	8001464 <HAL_GPIO_Init>
}
 80010ee:	bf00      	nop
 80010f0:	3758      	adds	r7, #88	; 0x58
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40013800 	.word	0x40013800
 80010fc:	48000400 	.word	0x48000400
 8001100:	40004400 	.word	0x40004400

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <NMI_Handler+0x4>

0800110a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <HardFault_Handler+0x4>

08001110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <MemManage_Handler+0x4>

08001116 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <UsageFault_Handler+0x4>

08001122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr

0800112e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr

0800113a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114a:	f000 f88d 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}

08001152 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
	...

08001160 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001162:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001164:	f7ff fff5 	bl	8001152 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <LoopForever+0x6>)
  ldr r1, =_edata
 800116a:	490d      	ldr	r1, [pc, #52]	; (80011a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800116c:	4a0d      	ldr	r2, [pc, #52]	; (80011a4 <LoopForever+0xe>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001170:	e002      	b.n	8001178 <LoopCopyDataInit>

08001172 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001172:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001174:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001176:	3304      	adds	r3, #4

08001178 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001178:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800117c:	d3f9      	bcc.n	8001172 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800117e:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001180:	4c0a      	ldr	r4, [pc, #40]	; (80011ac <LoopForever+0x16>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001184:	e001      	b.n	800118a <LoopFillZerobss>

08001186 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001186:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001188:	3204      	adds	r2, #4

0800118a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800118c:	d3fb      	bcc.n	8001186 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800118e:	f002 fcb1 	bl	8003af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001192:	f7ff f9a1 	bl	80004d8 <main>

08001196 <LoopForever>:

LoopForever:
    b LoopForever
 8001196:	e7fe      	b.n	8001196 <LoopForever>
  ldr   r0, =_estack
 8001198:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800119c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011a4:	08003e58 	.word	0x08003e58
  ldr r2, =_sbss
 80011a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011ac:	20000154 	.word	0x20000154

080011b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b0:	e7fe      	b.n	80011b0 <ADC_IRQHandler>
	...

080011b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ba:	2300      	movs	r3, #0
 80011bc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011be:	2003      	movs	r0, #3
 80011c0:	f000 f91e 	bl	8001400 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80011c4:	f001 fab6 	bl	8002734 <HAL_RCC_GetHCLKFreq>
 80011c8:	4603      	mov	r3, r0
 80011ca:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <HAL_Init+0x3c>)
 80011cc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ce:	200f      	movs	r0, #15
 80011d0:	f000 f810 	bl	80011f4 <HAL_InitTick>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	71fb      	strb	r3, [r7, #7]
 80011de:	e001      	b.n	80011e4 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011e0:	f7ff ff14 	bl	800100c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011e4:	79fb      	ldrb	r3, [r7, #7]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000000 	.word	0x20000000

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_InitTick+0x6c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d024      	beq.n	8001252 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001208:	f001 fa94 	bl	8002734 <HAL_RCC_GetHCLKFreq>
 800120c:	4602      	mov	r2, r0
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <HAL_InitTick+0x6c>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	4619      	mov	r1, r3
 8001214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001218:	fbb3 f3f1 	udiv	r3, r3, r1
 800121c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001220:	4618      	mov	r0, r3
 8001222:	f000 f912 	bl	800144a <HAL_SYSTICK_Config>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d10f      	bne.n	800124c <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b0f      	cmp	r3, #15
 8001230:	d809      	bhi.n	8001246 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001232:	2200      	movs	r2, #0
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	f04f 30ff 	mov.w	r0, #4294967295
 800123a:	f000 f8ec 	bl	8001416 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800123e:	4a09      	ldr	r2, [pc, #36]	; (8001264 <HAL_InitTick+0x70>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	e007      	b.n	8001256 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	73fb      	strb	r3, [r7, #15]
 800124a:	e004      	b.n	8001256 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	73fb      	strb	r3, [r7, #15]
 8001250:	e001      	b.n	8001256 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001256:	7bfb      	ldrb	r3, [r7, #15]
}
 8001258:	4618      	mov	r0, r3
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000008 	.word	0x20000008
 8001264:	20000004 	.word	0x20000004

08001268 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_IncTick+0x1c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_IncTick+0x20>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a03      	ldr	r2, [pc, #12]	; (8001288 <HAL_IncTick+0x20>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	20000008 	.word	0x20000008
 8001288:	20000150 	.word	0x20000150

0800128c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b02      	ldr	r3, [pc, #8]	; (800129c <HAL_GetTick+0x10>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	20000150 	.word	0x20000150

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	; (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	; (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013cc:	d301      	bcc.n	80013d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00f      	b.n	80013f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d2:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <SysTick_Config+0x40>)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013da:	210f      	movs	r1, #15
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f7ff ff90 	bl	8001304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <SysTick_Config+0x40>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ea:	4b04      	ldr	r3, [pc, #16]	; (80013fc <SysTick_Config+0x40>)
 80013ec:	2207      	movs	r2, #7
 80013ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	e000e010 	.word	0xe000e010

08001400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ff49 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001424:	f7ff ff60 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 8001428:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	6978      	ldr	r0, [r7, #20]
 8001430:	f7ff ff92 	bl	8001358 <NVIC_EncodePriority>
 8001434:	4602      	mov	r2, r0
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff61 	bl	8001304 <__NVIC_SetPriority>
}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ffb2 	bl	80013bc <SysTick_Config>
 8001458:	4603      	mov	r3, r0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001472:	e140      	b.n	80016f6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2101      	movs	r1, #1
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	4013      	ands	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 8132 	beq.w	80016f0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b01      	cmp	r3, #1
 8001496:	d005      	beq.n	80014a4 <HAL_GPIO_Init+0x40>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d130      	bne.n	8001506 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014da:	2201      	movs	r2, #1
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	f003 0201 	and.w	r2, r3, #1
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	2b03      	cmp	r3, #3
 8001510:	d017      	beq.n	8001542 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2203      	movs	r2, #3
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d123      	bne.n	8001596 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	220f      	movs	r2, #15
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	43db      	mvns	r3, r3
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	08da      	lsrs	r2, r3, #3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3208      	adds	r2, #8
 8001590:	6939      	ldr	r1, [r7, #16]
 8001592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	2203      	movs	r2, #3
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0203 	and.w	r2, r3, #3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 808c 	beq.w	80016f0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80015d8:	4a4e      	ldr	r2, [pc, #312]	; (8001714 <HAL_GPIO_Init+0x2b0>)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	2207      	movs	r2, #7
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1bc>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a44      	ldr	r2, [pc, #272]	; (8001718 <HAL_GPIO_Init+0x2b4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1b8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a43      	ldr	r2, [pc, #268]	; (800171c <HAL_GPIO_Init+0x2b8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1b4>
 8001614:	2302      	movs	r3, #2
 8001616:	e004      	b.n	8001622 <HAL_GPIO_Init+0x1be>
 8001618:	2307      	movs	r3, #7
 800161a:	e002      	b.n	8001622 <HAL_GPIO_Init+0x1be>
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <HAL_GPIO_Init+0x1be>
 8001620:	2300      	movs	r3, #0
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	f002 0203 	and.w	r2, r2, #3
 8001628:	0092      	lsls	r2, r2, #2
 800162a:	4093      	lsls	r3, r2
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001632:	4938      	ldr	r1, [pc, #224]	; (8001714 <HAL_GPIO_Init+0x2b0>)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	3302      	adds	r3, #2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001640:	4b37      	ldr	r3, [pc, #220]	; (8001720 <HAL_GPIO_Init+0x2bc>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	43db      	mvns	r3, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001664:	4a2e      	ldr	r2, [pc, #184]	; (8001720 <HAL_GPIO_Init+0x2bc>)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800166a:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <HAL_GPIO_Init+0x2bc>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800168e:	4a24      	ldr	r2, [pc, #144]	; (8001720 <HAL_GPIO_Init+0x2bc>)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <HAL_GPIO_Init+0x2bc>)
 8001696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800169a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43db      	mvns	r3, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80016ba:	4a19      	ldr	r2, [pc, #100]	; (8001720 <HAL_GPIO_Init+0x2bc>)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <HAL_GPIO_Init+0x2bc>)
 80016c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016c8:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <HAL_GPIO_Init+0x2bc>)
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3301      	adds	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	f47f aeb7 	bne.w	8001474 <HAL_GPIO_Init+0x10>
  }
}
 8001706:	bf00      	nop
 8001708:	bf00      	nop
 800170a:	371c      	adds	r7, #28
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40010000 	.word	0x40010000
 8001718:	48000400 	.word	0x48000400
 800171c:	48000800 	.word	0x48000800
 8001720:	58000800 	.word	0x58000800

08001724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]
 8001730:	4613      	mov	r3, r2
 8001732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001734:	787b      	ldrb	r3, [r7, #1]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800173a:	887a      	ldrh	r2, [r7, #2]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001740:	e002      	b.n	8001748 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001742:	887a      	ldrh	r2, [r7, #2]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
	...

08001754 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <HAL_PWR_EnableBkUpAccess+0x18>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a03      	ldr	r2, [pc, #12]	; (800176c <HAL_PWR_EnableBkUpAccess+0x18>)
 800175e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	58000400 	.word	0x58000400

08001770 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <HAL_PWREx_GetVoltageRange+0x14>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	58000400 	.word	0x58000400

08001788 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001798:	d101      	bne.n	800179e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr
 80017a8:	58000400 	.word	0x58000400

080017ac <LL_RCC_HSE_EnableTcxo>:
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80017b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017be:	6013      	str	r3, [r2, #0]
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <LL_RCC_HSE_DisableTcxo>:
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80017cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr

080017e4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80017e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017f6:	d101      	bne.n	80017fc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <LL_RCC_HSE_Enable>:
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800180a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001818:	6013      	str	r3, [r2, #0]
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <LL_RCC_HSE_Disable>:
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001834:	6013      	str	r3, [r2, #0]
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <LL_RCC_HSE_IsReady>:
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001850:	d101      	bne.n	8001856 <LL_RCC_HSE_IsReady+0x18>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <LL_RCC_HSE_IsReady+0x1a>
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <LL_RCC_HSI_Enable>:
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800186e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001872:	6013      	str	r3, [r2, #0]
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <LL_RCC_HSI_Disable>:
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800188a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <LL_RCC_HSI_IsReady>:
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800189c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018aa:	d101      	bne.n	80018b0 <LL_RCC_HSI_IsReady+0x18>
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <LL_RCC_HSI_IsReady+0x1a>
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr

080018ba <LL_RCC_HSI_SetCalibTrimming>:
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80018c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	061b      	lsls	r3, r3, #24
 80018d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr

080018e2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80018e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d101      	bne.n	80018fa <LL_RCC_LSE_IsReady+0x18>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <LL_RCC_LSE_IsReady+0x1a>
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001910:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001930:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b02      	cmp	r3, #2
 8001956:	d101      	bne.n	800195c <LL_RCC_LSI_IsReady+0x18>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <LL_RCC_LSI_IsReady+0x1a>
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr

08001966 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800196a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6013      	str	r3, [r2, #0]
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr

08001982 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	6013      	str	r3, [r2, #0]
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80019a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d101      	bne.n	80019b4 <LL_RCC_MSI_IsReady+0x16>
 80019b0:	2301      	movs	r3, #1
 80019b2:	e000      	b.n	80019b6 <LL_RCC_MSI_IsReady+0x18>
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80019be:	b480      	push	{r7}
 80019c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80019c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d101      	bne.n	80019d4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80019e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80019f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a26:	4313      	orrs	r3, r2
 8001a28:	604b      	str	r3, [r1, #4]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr

08001a34 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f023 0203 	bic.w	r2, r3, #3
 8001a46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	608b      	str	r3, [r1, #8]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 030c 	and.w	r3, r3, #12
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001aa6:	f023 020f 	bic.w	r2, r3, #15
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr

08001ac2 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ad4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001afa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	608b      	str	r3, [r1, #8]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr

08001b3e <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b7c:	6013      	str	r3, [r2, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b98:	6013      	str	r3, [r2, #0]
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr

08001ba2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bb4:	d101      	bne.n	8001bba <LL_RCC_PLL_IsReady+0x18>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <LL_RCC_PLL_IsReady+0x1a>
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	0a1b      	lsrs	r3, r3, #8
 8001bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr

08001bf2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	f003 0303 	and.w	r3, r3, #3
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr

08001c1e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001c22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c30:	d101      	bne.n	8001c36 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c48:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c54:	d101      	bne.n	8001c5a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c76:	d101      	bne.n	8001c7c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c98:	d101      	bne.n	8001c9e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e36f      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cba:	f7ff fece 	bl	8001a5a <LL_RCC_GetSysClkSource>
 8001cbe:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cc0:	f7ff ffa2 	bl	8001c08 <LL_RCC_PLL_GetMainSource>
 8001cc4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0320 	and.w	r3, r3, #32
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 80c4 	beq.w	8001e5c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d005      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x3e>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	2b0c      	cmp	r3, #12
 8001cde:	d176      	bne.n	8001dce <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d173      	bne.n	8001dce <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e353      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_OscConfig+0x68>
 8001d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d0e:	e006      	b.n	8001d1e <HAL_RCC_OscConfig+0x76>
 8001d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d222      	bcs.n	8001d68 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 fd3c 	bl	80027a4 <RCC_SetFlashLatencyFromMSIRange>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e331      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d40:	f043 0308 	orr.w	r3, r3, #8
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fe53 	bl	8001a0c <LL_RCC_MSI_SetCalibTrimming>
 8001d66:	e021      	b.n	8001dac <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d72:	f043 0308 	orr.w	r3, r3, #8
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fe3a 	bl	8001a0c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 fd01 	bl	80027a4 <RCC_SetFlashLatencyFromMSIRange>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e2f6      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001dac:	f000 fcc2 	bl	8002734 <HAL_RCC_GetHCLKFreq>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4aa7      	ldr	r2, [pc, #668]	; (8002050 <HAL_RCC_OscConfig+0x3a8>)
 8001db4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001db6:	4ba7      	ldr	r3, [pc, #668]	; (8002054 <HAL_RCC_OscConfig+0x3ac>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fa1a 	bl	80011f4 <HAL_InitTick>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001dc4:	7cfb      	ldrb	r3, [r7, #19]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d047      	beq.n	8001e5a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001dca:	7cfb      	ldrb	r3, [r7, #19]
 8001dcc:	e2e5      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d02c      	beq.n	8001e30 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dd6:	f7ff fdc6 	bl	8001966 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dda:	f7ff fa57 	bl	800128c <HAL_GetTick>
 8001dde:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001de2:	f7ff fa53 	bl	800128c <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e2d2      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001df4:	f7ff fdd3 	bl	800199e <LL_RCC_MSI_IsReady>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f1      	beq.n	8001de2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e08:	f043 0308 	orr.w	r3, r3, #8
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e20:	4313      	orrs	r3, r2
 8001e22:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fdef 	bl	8001a0c <LL_RCC_MSI_SetCalibTrimming>
 8001e2e:	e015      	b.n	8001e5c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e30:	f7ff fda7 	bl	8001982 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e34:	f7ff fa2a 	bl	800128c <HAL_GetTick>
 8001e38:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e3c:	f7ff fa26 	bl	800128c <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e2a5      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001e4e:	f7ff fda6 	bl	800199e <LL_RCC_MSI_IsReady>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f1      	bne.n	8001e3c <HAL_RCC_OscConfig+0x194>
 8001e58:	e000      	b.n	8001e5c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001e5a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d058      	beq.n	8001f1a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d005      	beq.n	8001e7a <HAL_RCC_OscConfig+0x1d2>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	2b0c      	cmp	r3, #12
 8001e72:	d108      	bne.n	8001e86 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	d105      	bne.n	8001e86 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d14b      	bne.n	8001f1a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e289      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea4:	d102      	bne.n	8001eac <HAL_RCC_OscConfig+0x204>
 8001ea6:	f7ff fcae 	bl	8001806 <LL_RCC_HSE_Enable>
 8001eaa:	e00d      	b.n	8001ec8 <HAL_RCC_OscConfig+0x220>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001eb4:	d104      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x218>
 8001eb6:	f7ff fc79 	bl	80017ac <LL_RCC_HSE_EnableTcxo>
 8001eba:	f7ff fca4 	bl	8001806 <LL_RCC_HSE_Enable>
 8001ebe:	e003      	b.n	8001ec8 <HAL_RCC_OscConfig+0x220>
 8001ec0:	f7ff fcaf 	bl	8001822 <LL_RCC_HSE_Disable>
 8001ec4:	f7ff fc80 	bl	80017c8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d012      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7ff f9dc 	bl	800128c <HAL_GetTick>
 8001ed4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7ff f9d8 	bl	800128c <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	; 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e257      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001eea:	f7ff fca8 	bl	800183e <LL_RCC_HSE_IsReady>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f1      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x230>
 8001ef4:	e011      	b.n	8001f1a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef6:	f7ff f9c9 	bl	800128c <HAL_GetTick>
 8001efa:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001efe:	f7ff f9c5 	bl	800128c <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b64      	cmp	r3, #100	; 0x64
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e244      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001f10:	f7ff fc95 	bl	800183e <LL_RCC_HSE_IsReady>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f1      	bne.n	8001efe <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d046      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_OscConfig+0x290>
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	2b0c      	cmp	r3, #12
 8001f30:	d10e      	bne.n	8001f50 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d10b      	bne.n	8001f50 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e22a      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fcb6 	bl	80018ba <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001f4e:	e031      	b.n	8001fb4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d019      	beq.n	8001f8c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f58:	f7ff fc82 	bl	8001860 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5c:	f7ff f996 	bl	800128c <HAL_GetTick>
 8001f60:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f64:	f7ff f992 	bl	800128c <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e211      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001f76:	f7ff fc8f 	bl	8001898 <LL_RCC_HSI_IsReady>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f1      	beq.n	8001f64 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	695b      	ldr	r3, [r3, #20]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff fc98 	bl	80018ba <LL_RCC_HSI_SetCalibTrimming>
 8001f8a:	e013      	b.n	8001fb4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f8c:	f7ff fc76 	bl	800187c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7ff f97c 	bl	800128c <HAL_GetTick>
 8001f94:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f98:	f7ff f978 	bl	800128c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e1f7      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001faa:	f7ff fc75 	bl	8001898 <LL_RCC_HSI_IsReady>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f1      	bne.n	8001f98 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d06e      	beq.n	800209e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d056      	beq.n	8002076 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69da      	ldr	r2, [r3, #28]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d031      	beq.n	8002044 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d006      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e1d0      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d013      	beq.n	800202a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002002:	f7ff fc8f 	bl	8001924 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002006:	f7ff f941 	bl	800128c <HAL_GetTick>
 800200a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200e:	f7ff f93d 	bl	800128c <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b11      	cmp	r3, #17
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e1bc      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002020:	f7ff fc90 	bl	8001944 <LL_RCC_LSI_IsReady>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f1      	bne.n	800200e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800202a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002032:	f023 0210 	bic.w	r2, r3, #16
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002044:	f7ff fc5e 	bl	8001904 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002048:	f7ff f920 	bl	800128c <HAL_GetTick>
 800204c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800204e:	e00c      	b.n	800206a <HAL_RCC_OscConfig+0x3c2>
 8002050:	20000000 	.word	0x20000000
 8002054:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002058:	f7ff f918 	bl	800128c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b11      	cmp	r3, #17
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e197      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800206a:	f7ff fc6b 	bl	8001944 <LL_RCC_LSI_IsReady>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f1      	beq.n	8002058 <HAL_RCC_OscConfig+0x3b0>
 8002074:	e013      	b.n	800209e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002076:	f7ff fc55 	bl	8001924 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207a:	f7ff f907 	bl	800128c <HAL_GetTick>
 800207e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002082:	f7ff f903 	bl	800128c <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b11      	cmp	r3, #17
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e182      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002094:	f7ff fc56 	bl	8001944 <LL_RCC_LSI_IsReady>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f1      	bne.n	8002082 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 80d8 	beq.w	800225c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80020ac:	f7ff fb6c 	bl	8001788 <LL_PWR_IsEnabledBkUpAccess>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d113      	bne.n	80020de <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80020b6:	f7ff fb4d 	bl	8001754 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ba:	f7ff f8e7 	bl	800128c <HAL_GetTick>
 80020be:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c2:	f7ff f8e3 	bl	800128c <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e162      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80020d4:	f7ff fb58 	bl	8001788 <LL_PWR_IsEnabledBkUpAccess>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f1      	beq.n	80020c2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d07b      	beq.n	80021de <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b85      	cmp	r3, #133	; 0x85
 80020ec:	d003      	beq.n	80020f6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	2b05      	cmp	r3, #5
 80020f4:	d109      	bne.n	800210a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002102:	f043 0304 	orr.w	r3, r3, #4
 8002106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210a:	f7ff f8bf 	bl	800128c <HAL_GetTick>
 800210e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002118:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002124:	e00a      	b.n	800213c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002126:	f7ff f8b1 	bl	800128c <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	f241 3288 	movw	r2, #5000	; 0x1388
 8002134:	4293      	cmp	r3, r2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e12e      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800213c:	f7ff fbd1 	bl	80018e2 <LL_RCC_LSE_IsReady>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0ef      	beq.n	8002126 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	2b81      	cmp	r3, #129	; 0x81
 800214c:	d003      	beq.n	8002156 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b85      	cmp	r3, #133	; 0x85
 8002154:	d121      	bne.n	800219a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002156:	f7ff f899 	bl	800128c <HAL_GetTick>
 800215a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800215c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800216c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002170:	e00a      	b.n	8002188 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002172:	f7ff f88b 	bl	800128c <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002180:	4293      	cmp	r3, r2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e108      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0ec      	beq.n	8002172 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002198:	e060      	b.n	800225c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219a:	f7ff f877 	bl	800128c <HAL_GetTick>
 800219e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80021a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80021b4:	e00a      	b.n	80021cc <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7ff f869 	bl	800128c <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e0e6      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80021cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1ec      	bne.n	80021b6 <HAL_RCC_OscConfig+0x50e>
 80021dc:	e03e      	b.n	800225c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021de:	f7ff f855 	bl	800128c <HAL_GetTick>
 80021e2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80021e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fa:	f7ff f847 	bl	800128c <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	; 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e0c4      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1ec      	bne.n	80021fa <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002220:	f7ff f834 	bl	800128c <HAL_GetTick>
 8002224:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002232:	f023 0301 	bic.w	r3, r3, #1
 8002236:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800223a:	e00a      	b.n	8002252 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223c:	f7ff f826 	bl	800128c <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	; 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e0a3      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002252:	f7ff fb46 	bl	80018e2 <LL_RCC_LSE_IsReady>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1ef      	bne.n	800223c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 8099 	beq.w	8002398 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	2b0c      	cmp	r3, #12
 800226a:	d06c      	beq.n	8002346 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	2b02      	cmp	r3, #2
 8002272:	d14b      	bne.n	800230c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002274:	f7ff fc87 	bl	8001b86 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7ff f808 	bl	800128c <HAL_GetTick>
 800227c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002280:	f7ff f804 	bl	800128c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b0a      	cmp	r3, #10
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e083      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002292:	f7ff fc86 	bl	8001ba2 <LL_RCC_PLL_IsReady>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f1      	bne.n	8002280 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800229c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	4b40      	ldr	r3, [pc, #256]	; (80023a4 <HAL_RCC_OscConfig+0x6fc>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022ae:	4311      	orrs	r1, r2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022b4:	0212      	lsls	r2, r2, #8
 80022b6:	4311      	orrs	r1, r2
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022bc:	4311      	orrs	r1, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022c2:	4311      	orrs	r1, r2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022c8:	430a      	orrs	r2, r1
 80022ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d2:	f7ff fc4a 	bl	8001b6a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7fe ffd1 	bl	800128c <HAL_GetTick>
 80022ea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ee:	f7fe ffcd 	bl	800128c <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b0a      	cmp	r3, #10
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e04c      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002300:	f7ff fc4f 	bl	8001ba2 <LL_RCC_PLL_IsReady>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f1      	beq.n	80022ee <HAL_RCC_OscConfig+0x646>
 800230a:	e045      	b.n	8002398 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230c:	f7ff fc3b 	bl	8001b86 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7fe ffbc 	bl	800128c <HAL_GetTick>
 8002314:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002318:	f7fe ffb8 	bl	800128c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b0a      	cmp	r3, #10
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e037      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800232a:	f7ff fc3a 	bl	8001ba2 <LL_RCC_PLL_IsReady>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f1      	bne.n	8002318 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800233e:	4b1a      	ldr	r3, [pc, #104]	; (80023a8 <HAL_RCC_OscConfig+0x700>)
 8002340:	4013      	ands	r3, r2
 8002342:	60cb      	str	r3, [r1, #12]
 8002344:	e028      	b.n	8002398 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e023      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	f003 0203 	and.w	r2, r3, #3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	429a      	cmp	r2, r3
 8002366:	d115      	bne.n	8002394 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002372:	429a      	cmp	r2, r3
 8002374:	d10e      	bne.n	8002394 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002380:	021b      	lsls	r3, r3, #8
 8002382:	429a      	cmp	r2, r3
 8002384:	d106      	bne.n	8002394 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3720      	adds	r7, #32
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	11c1808c 	.word	0x11c1808c
 80023a8:	eefefffc 	.word	0xeefefffc

080023ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e10f      	b.n	80025e0 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c0:	4b89      	ldr	r3, [pc, #548]	; (80025e8 <HAL_RCC_ClockConfig+0x23c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d91b      	bls.n	8002406 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ce:	4b86      	ldr	r3, [pc, #536]	; (80025e8 <HAL_RCC_ClockConfig+0x23c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 0207 	bic.w	r2, r3, #7
 80023d6:	4984      	ldr	r1, [pc, #528]	; (80025e8 <HAL_RCC_ClockConfig+0x23c>)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023de:	f7fe ff55 	bl	800128c <HAL_GetTick>
 80023e2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80023e6:	f7fe ff51 	bl	800128c <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e0f3      	b.n	80025e0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f8:	4b7b      	ldr	r3, [pc, #492]	; (80025e8 <HAL_RCC_ClockConfig+0x23c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d1ef      	bne.n	80023e6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d016      	beq.n	8002440 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fb2a 	bl	8001a70 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800241c:	f7fe ff36 	bl	800128c <HAL_GetTick>
 8002420:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002422:	e008      	b.n	8002436 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002424:	f7fe ff32 	bl	800128c <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e0d4      	b.n	80025e0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002436:	f7ff fbf2 	bl	8001c1e <LL_RCC_IsActiveFlag_HPRE>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f1      	beq.n	8002424 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002448:	2b00      	cmp	r3, #0
 800244a:	d016      	beq.n	800247a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fb20 	bl	8001a96 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002456:	f7fe ff19 	bl	800128c <HAL_GetTick>
 800245a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800245c:	e008      	b.n	8002470 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800245e:	f7fe ff15 	bl	800128c <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e0b7      	b.n	80025e0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002470:	f7ff fbe6 	bl	8001c40 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f1      	beq.n	800245e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b00      	cmp	r3, #0
 8002484:	d016      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fb19 	bl	8001ac2 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002490:	f7fe fefc 	bl	800128c <HAL_GetTick>
 8002494:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002496:	e008      	b.n	80024aa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002498:	f7fe fef8 	bl	800128c <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e09a      	b.n	80025e0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80024aa:	f7ff fbdb 	bl	8001c64 <LL_RCC_IsActiveFlag_PPRE1>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f1      	beq.n	8002498 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d017      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fb0e 	bl	8001ae8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80024cc:	f7fe fede 	bl	800128c <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80024d4:	f7fe feda 	bl	800128c <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e07c      	b.n	80025e0 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80024e6:	f7ff fbce 	bl	8001c86 <LL_RCC_IsActiveFlag_PPRE2>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f1      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d043      	beq.n	8002584 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b02      	cmp	r3, #2
 8002502:	d106      	bne.n	8002512 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002504:	f7ff f99b 	bl	800183e <LL_RCC_HSE_IsReady>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d11e      	bne.n	800254c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e066      	b.n	80025e0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b03      	cmp	r3, #3
 8002518:	d106      	bne.n	8002528 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800251a:	f7ff fb42 	bl	8001ba2 <LL_RCC_PLL_IsReady>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d113      	bne.n	800254c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e05b      	b.n	80025e0 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d106      	bne.n	800253e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002530:	f7ff fa35 	bl	800199e <LL_RCC_MSI_IsReady>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d108      	bne.n	800254c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e050      	b.n	80025e0 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800253e:	f7ff f9ab 	bl	8001898 <LL_RCC_HSI_IsReady>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e049      	b.n	80025e0 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fa6f 	bl	8001a34 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002556:	f7fe fe99 	bl	800128c <HAL_GetTick>
 800255a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255c:	e00a      	b.n	8002574 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800255e:	f7fe fe95 	bl	800128c <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f241 3288 	movw	r2, #5000	; 0x1388
 800256c:	4293      	cmp	r3, r2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e035      	b.n	80025e0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002574:	f7ff fa71 	bl	8001a5a <LL_RCC_GetSysClkSource>
 8002578:	4602      	mov	r2, r0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	429a      	cmp	r2, r3
 8002582:	d1ec      	bne.n	800255e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002584:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <HAL_RCC_ClockConfig+0x23c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d21b      	bcs.n	80025ca <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_RCC_ClockConfig+0x23c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 0207 	bic.w	r2, r3, #7
 800259a:	4913      	ldr	r1, [pc, #76]	; (80025e8 <HAL_RCC_ClockConfig+0x23c>)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025a2:	f7fe fe73 	bl	800128c <HAL_GetTick>
 80025a6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80025aa:	f7fe fe6f 	bl	800128c <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e011      	b.n	80025e0 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025bc:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <HAL_RCC_ClockConfig+0x23c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d1ef      	bne.n	80025aa <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80025ca:	f000 f8b3 	bl	8002734 <HAL_RCC_GetHCLKFreq>
 80025ce:	4603      	mov	r3, r0
 80025d0:	4a06      	ldr	r2, [pc, #24]	; (80025ec <HAL_RCC_ClockConfig+0x240>)
 80025d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RCC_ClockConfig+0x244>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe fe0b 	bl	80011f4 <HAL_InitTick>
 80025de:	4603      	mov	r3, r0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	58004000 	.word	0x58004000
 80025ec:	20000000 	.word	0x20000000
 80025f0:	20000004 	.word	0x20000004

080025f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002602:	f7ff fa2a 	bl	8001a5a <LL_RCC_GetSysClkSource>
 8002606:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002608:	f7ff fafe 	bl	8001c08 <LL_RCC_PLL_GetMainSource>
 800260c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0x2c>
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b0c      	cmp	r3, #12
 8002618:	d139      	bne.n	800268e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d136      	bne.n	800268e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002620:	f7ff f9cd 	bl	80019be <LL_RCC_MSI_IsEnabledRangeSelect>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d115      	bne.n	8002656 <HAL_RCC_GetSysClockFreq+0x62>
 800262a:	f7ff f9c8 	bl	80019be <LL_RCC_MSI_IsEnabledRangeSelect>
 800262e:	4603      	mov	r3, r0
 8002630:	2b01      	cmp	r3, #1
 8002632:	d106      	bne.n	8002642 <HAL_RCC_GetSysClockFreq+0x4e>
 8002634:	f7ff f9d3 	bl	80019de <LL_RCC_MSI_GetRange>
 8002638:	4603      	mov	r3, r0
 800263a:	0a1b      	lsrs	r3, r3, #8
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	e005      	b.n	800264e <HAL_RCC_GetSysClockFreq+0x5a>
 8002642:	f7ff f9d7 	bl	80019f4 <LL_RCC_MSI_GetRangeAfterStandby>
 8002646:	4603      	mov	r3, r0
 8002648:	0a1b      	lsrs	r3, r3, #8
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	4a36      	ldr	r2, [pc, #216]	; (8002728 <HAL_RCC_GetSysClockFreq+0x134>)
 8002650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002654:	e014      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x8c>
 8002656:	f7ff f9b2 	bl	80019be <LL_RCC_MSI_IsEnabledRangeSelect>
 800265a:	4603      	mov	r3, r0
 800265c:	2b01      	cmp	r3, #1
 800265e:	d106      	bne.n	800266e <HAL_RCC_GetSysClockFreq+0x7a>
 8002660:	f7ff f9bd 	bl	80019de <LL_RCC_MSI_GetRange>
 8002664:	4603      	mov	r3, r0
 8002666:	091b      	lsrs	r3, r3, #4
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	e005      	b.n	800267a <HAL_RCC_GetSysClockFreq+0x86>
 800266e:	f7ff f9c1 	bl	80019f4 <LL_RCC_MSI_GetRangeAfterStandby>
 8002672:	4603      	mov	r3, r0
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	4a2b      	ldr	r2, [pc, #172]	; (8002728 <HAL_RCC_GetSysClockFreq+0x134>)
 800267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002680:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d115      	bne.n	80026b4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800268c:	e012      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b04      	cmp	r3, #4
 8002692:	d102      	bne.n	800269a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <HAL_RCC_GetSysClockFreq+0x138>)
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	e00c      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b08      	cmp	r3, #8
 800269e:	d109      	bne.n	80026b4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80026a0:	f7ff f8a0 	bl	80017e4 <LL_RCC_HSE_IsEnabledDiv2>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d102      	bne.n	80026b0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80026aa:	4b20      	ldr	r3, [pc, #128]	; (800272c <HAL_RCC_GetSysClockFreq+0x138>)
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	e001      	b.n	80026b4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80026b0:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <HAL_RCC_GetSysClockFreq+0x13c>)
 80026b2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026b4:	f7ff f9d1 	bl	8001a5a <LL_RCC_GetSysClkSource>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b0c      	cmp	r3, #12
 80026bc:	d12f      	bne.n	800271e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80026be:	f7ff faa3 	bl	8001c08 <LL_RCC_PLL_GetMainSource>
 80026c2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d003      	beq.n	80026d2 <HAL_RCC_GetSysClockFreq+0xde>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d003      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0xe4>
 80026d0:	e00d      	b.n	80026ee <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80026d2:	4b16      	ldr	r3, [pc, #88]	; (800272c <HAL_RCC_GetSysClockFreq+0x138>)
 80026d4:	60fb      	str	r3, [r7, #12]
        break;
 80026d6:	e00d      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80026d8:	f7ff f884 	bl	80017e4 <LL_RCC_HSE_IsEnabledDiv2>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d102      	bne.n	80026e8 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_RCC_GetSysClockFreq+0x138>)
 80026e4:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80026e6:	e005      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <HAL_RCC_GetSysClockFreq+0x13c>)
 80026ea:	60fb      	str	r3, [r7, #12]
        break;
 80026ec:	e002      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	60fb      	str	r3, [r7, #12]
        break;
 80026f2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80026f4:	f7ff fa66 	bl	8001bc4 <LL_RCC_PLL_GetN>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	fb03 f402 	mul.w	r4, r3, r2
 8002700:	f7ff fa77 	bl	8001bf2 <LL_RCC_PLL_GetDivider>
 8002704:	4603      	mov	r3, r0
 8002706:	091b      	lsrs	r3, r3, #4
 8002708:	3301      	adds	r3, #1
 800270a:	fbb4 f4f3 	udiv	r4, r4, r3
 800270e:	f7ff fa65 	bl	8001bdc <LL_RCC_PLL_GetR>
 8002712:	4603      	mov	r3, r0
 8002714:	0f5b      	lsrs	r3, r3, #29
 8002716:	3301      	adds	r3, #1
 8002718:	fbb4 f3f3 	udiv	r3, r4, r3
 800271c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800271e:	697b      	ldr	r3, [r7, #20]
}
 8002720:	4618      	mov	r0, r3
 8002722:	371c      	adds	r7, #28
 8002724:	46bd      	mov	sp, r7
 8002726:	bd90      	pop	{r4, r7, pc}
 8002728:	08003de0 	.word	0x08003de0
 800272c:	00f42400 	.word	0x00f42400
 8002730:	01e84800 	.word	0x01e84800

08002734 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002734:	b598      	push	{r3, r4, r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002738:	f7ff ff5c 	bl	80025f4 <HAL_RCC_GetSysClockFreq>
 800273c:	4604      	mov	r4, r0
 800273e:	f7ff f9e6 	bl	8001b0e <LL_RCC_GetAHBPrescaler>
 8002742:	4603      	mov	r3, r0
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	4a03      	ldr	r2, [pc, #12]	; (8002758 <HAL_RCC_GetHCLKFreq+0x24>)
 800274c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002750:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002754:	4618      	mov	r0, r3
 8002756:	bd98      	pop	{r3, r4, r7, pc}
 8002758:	08003d80 	.word	0x08003d80

0800275c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800275c:	b598      	push	{r3, r4, r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002760:	f7ff ffe8 	bl	8002734 <HAL_RCC_GetHCLKFreq>
 8002764:	4604      	mov	r4, r0
 8002766:	f7ff f9ea 	bl	8001b3e <LL_RCC_GetAPB1Prescaler>
 800276a:	4603      	mov	r3, r0
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	4a03      	ldr	r2, [pc, #12]	; (800277c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002774:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002778:	4618      	mov	r0, r3
 800277a:	bd98      	pop	{r3, r4, r7, pc}
 800277c:	08003dc0 	.word	0x08003dc0

08002780 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002780:	b598      	push	{r3, r4, r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002784:	f7ff ffd6 	bl	8002734 <HAL_RCC_GetHCLKFreq>
 8002788:	4604      	mov	r4, r0
 800278a:	f7ff f9e3 	bl	8001b54 <LL_RCC_GetAPB2Prescaler>
 800278e:	4603      	mov	r3, r0
 8002790:	0adb      	lsrs	r3, r3, #11
 8002792:	4a03      	ldr	r2, [pc, #12]	; (80027a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002798:	fa24 f303 	lsr.w	r3, r4, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd98      	pop	{r3, r4, r7, pc}
 80027a0:	08003dc0 	.word	0x08003dc0

080027a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	091b      	lsrs	r3, r3, #4
 80027b0:	f003 030f 	and.w	r3, r3, #15
 80027b4:	4a10      	ldr	r2, [pc, #64]	; (80027f8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80027b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ba:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80027bc:	f7ff f9b2 	bl	8001b24 <LL_RCC_GetAHB3Prescaler>
 80027c0:	4603      	mov	r3, r0
 80027c2:	091b      	lsrs	r3, r3, #4
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	4a0c      	ldr	r2, [pc, #48]	; (80027fc <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80027ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d4:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	4a09      	ldr	r2, [pc, #36]	; (8002800 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	0c9c      	lsrs	r4, r3, #18
 80027e0:	f7fe ffc6 	bl	8001770 <HAL_PWREx_GetVoltageRange>
 80027e4:	4603      	mov	r3, r0
 80027e6:	4619      	mov	r1, r3
 80027e8:	4620      	mov	r0, r4
 80027ea:	f000 f80b 	bl	8002804 <RCC_SetFlashLatency>
 80027ee:	4603      	mov	r3, r0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd90      	pop	{r4, r7, pc}
 80027f8:	08003de0 	.word	0x08003de0
 80027fc:	08003d80 	.word	0x08003d80
 8002800:	431bde83 	.word	0x431bde83

08002804 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08e      	sub	sp, #56	; 0x38
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800280e:	4a3a      	ldr	r2, [pc, #232]	; (80028f8 <RCC_SetFlashLatency+0xf4>)
 8002810:	f107 0320 	add.w	r3, r7, #32
 8002814:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002818:	6018      	str	r0, [r3, #0]
 800281a:	3304      	adds	r3, #4
 800281c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800281e:	4a37      	ldr	r2, [pc, #220]	; (80028fc <RCC_SetFlashLatency+0xf8>)
 8002820:	f107 0318 	add.w	r3, r7, #24
 8002824:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002828:	6018      	str	r0, [r3, #0]
 800282a:	3304      	adds	r3, #4
 800282c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800282e:	4a34      	ldr	r2, [pc, #208]	; (8002900 <RCC_SetFlashLatency+0xfc>)
 8002830:	f107 030c 	add.w	r3, r7, #12
 8002834:	ca07      	ldmia	r2, {r0, r1, r2}
 8002836:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800283a:	2300      	movs	r3, #0
 800283c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002844:	d11b      	bne.n	800287e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002846:	2300      	movs	r3, #0
 8002848:	633b      	str	r3, [r7, #48]	; 0x30
 800284a:	e014      	b.n	8002876 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	3338      	adds	r3, #56	; 0x38
 8002852:	443b      	add	r3, r7
 8002854:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002858:	461a      	mov	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4293      	cmp	r3, r2
 800285e:	d807      	bhi.n	8002870 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	3338      	adds	r3, #56	; 0x38
 8002866:	443b      	add	r3, r7
 8002868:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800286c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800286e:	e021      	b.n	80028b4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002872:	3301      	adds	r3, #1
 8002874:	633b      	str	r3, [r7, #48]	; 0x30
 8002876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002878:	2b02      	cmp	r3, #2
 800287a:	d9e7      	bls.n	800284c <RCC_SetFlashLatency+0x48>
 800287c:	e01a      	b.n	80028b4 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800287e:	2300      	movs	r3, #0
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002882:	e014      	b.n	80028ae <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	3338      	adds	r3, #56	; 0x38
 800288a:	443b      	add	r3, r7
 800288c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002890:	461a      	mov	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4293      	cmp	r3, r2
 8002896:	d807      	bhi.n	80028a8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	3338      	adds	r3, #56	; 0x38
 800289e:	443b      	add	r3, r7
 80028a0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80028a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80028a6:	e005      	b.n	80028b4 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80028a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028aa:	3301      	adds	r3, #1
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d9e7      	bls.n	8002884 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028b4:	4b13      	ldr	r3, [pc, #76]	; (8002904 <RCC_SetFlashLatency+0x100>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f023 0207 	bic.w	r2, r3, #7
 80028bc:	4911      	ldr	r1, [pc, #68]	; (8002904 <RCC_SetFlashLatency+0x100>)
 80028be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c0:	4313      	orrs	r3, r2
 80028c2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80028c4:	f7fe fce2 	bl	800128c <HAL_GetTick>
 80028c8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80028ca:	e008      	b.n	80028de <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028cc:	f7fe fcde 	bl	800128c <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e007      	b.n	80028ee <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <RCC_SetFlashLatency+0x100>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d1ef      	bne.n	80028cc <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3738      	adds	r7, #56	; 0x38
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	08003b64 	.word	0x08003b64
 80028fc:	08003b6c 	.word	0x08003b6c
 8002900:	08003b74 	.word	0x08003b74
 8002904:	58004000 	.word	0x58004000

08002908 <LL_RCC_LSE_IsReady>:
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800290c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b02      	cmp	r3, #2
 800291a:	d101      	bne.n	8002920 <LL_RCC_LSE_IsReady+0x18>
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <LL_RCC_LSE_IsReady+0x1a>
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr

0800292a <LL_RCC_SetUSARTClockSource>:
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002936:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	43db      	mvns	r3, r3
 8002940:	401a      	ands	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	b29b      	uxth	r3, r3
 8002946:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr

0800295a <LL_RCC_SetI2SClockSource>:
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800296e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4313      	orrs	r3, r2
 8002976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <LL_RCC_SetLPUARTClockSource>:
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800298c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002994:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002998:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <LL_RCC_SetI2CClockSource>:
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80029b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80029c6:	43db      	mvns	r3, r3
 80029c8:	401a      	ands	r2, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80029d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <LL_RCC_SetLPTIMClockSource>:
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80029ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	0c1b      	lsrs	r3, r3, #16
 80029fa:	041b      	lsls	r3, r3, #16
 80029fc:	43db      	mvns	r3, r3
 80029fe:	401a      	ands	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	041b      	lsls	r3, r3, #16
 8002a04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <LL_RCC_SetRNGClockSource>:
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a28:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <LL_RCC_SetADCClockSource>:
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <LL_RCC_SetRTCClockSource>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <LL_RCC_GetRTCClockSource>:
{
 8002a96:	b480      	push	{r7}
 8002a98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <LL_RCC_ForceBackupDomainReset>:
{
 8002aae:	b480      	push	{r7}
 8002ab0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ac6:	bf00      	nop
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <LL_RCC_ReleaseBackupDomainReset>:
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ada:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002ae6:	bf00      	nop
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
	...

08002af0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002afc:	2300      	movs	r3, #0
 8002afe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002b00:	2300      	movs	r3, #0
 8002b02:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d058      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002b10:	f7fe fe20 	bl	8001754 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b14:	f7fe fbba 	bl	800128c <HAL_GetTick>
 8002b18:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002b1a:	e009      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1c:	f7fe fbb6 	bl	800128c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d902      	bls.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	74fb      	strb	r3, [r7, #19]
        break;
 8002b2e:	e006      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002b30:	4b7b      	ldr	r3, [pc, #492]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b3c:	d1ee      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002b3e:	7cfb      	ldrb	r3, [r7, #19]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d13c      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002b44:	f7ff ffa7 	bl	8002a96 <LL_RCC_GetRTCClockSource>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d00f      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b5e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b60:	f7ff ffa5 	bl	8002aae <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b64:	f7ff ffb3 	bl	8002ace <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d014      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fb86 	bl	800128c <HAL_GetTick>
 8002b80:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002b82:	e00b      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b84:	f7fe fb82 	bl	800128c <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d902      	bls.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	74fb      	strb	r3, [r7, #19]
            break;
 8002b9a:	e004      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002b9c:	f7ff feb4 	bl	8002908 <LL_RCC_LSE_IsReady>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d1ee      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002ba6:	7cfb      	ldrb	r3, [r7, #19]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d105      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff5b 	bl	8002a6c <LL_RCC_SetRTCClockSource>
 8002bb6:	e004      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	74bb      	strb	r3, [r7, #18]
 8002bbc:	e001      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bbe:	7cfb      	ldrb	r3, [r7, #19]
 8002bc0:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d004      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fea9 	bl	800292a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d004      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fe9e 	bl	800292a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d004      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fec0 	bl	8002984 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d004      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fee6 	bl	80029e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d004      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fedb 	bl	80029e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d004      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fed0 	bl	80029e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d004      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff fea9 	bl	80029ae <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d004      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fe9e 	bl	80029ae <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d004      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fe93 	bl	80029ae <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d011      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fe5e 	bl	800295a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca6:	d107      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cb6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d010      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff fea5 	bl	8002a18 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d107      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ce0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ce4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d011      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fea3 	bl	8002a42 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d04:	d107      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d14:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002d16:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	58000400 	.word	0x58000400

08002d24 <LL_RCC_GetUSARTClockSource>:
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	401a      	ands	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	041b      	lsls	r3, r3, #16
 8002d3c:	4313      	orrs	r3, r2
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <LL_RCC_GetLPUARTClockSource>:
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4013      	ands	r3, r2
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e042      	b.n	8002dfe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fe f944 	bl	8001018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2224      	movs	r2, #36	; 0x24
 8002d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0201 	bic.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f977 	bl	800309c <UART_SetConfig>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e022      	b.n	8002dfe <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 fbdf 	bl	8003584 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685a      	ldr	r2, [r3, #4]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dd4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002de4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0201 	orr.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fc65 	bl	80036c6 <UART_CheckIdleState>
 8002dfc:	4603      	mov	r3, r0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b08a      	sub	sp, #40	; 0x28
 8002e0a:	af02      	add	r7, sp, #8
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	603b      	str	r3, [r7, #0]
 8002e12:	4613      	mov	r3, r2
 8002e14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	d173      	bne.n	8002f08 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d002      	beq.n	8002e2c <HAL_UART_Transmit+0x26>
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e06c      	b.n	8002f0a <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2221      	movs	r2, #33	; 0x21
 8002e3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e40:	f7fe fa24 	bl	800128c <HAL_GetTick>
 8002e44:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	88fa      	ldrh	r2, [r7, #6]
 8002e4a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	88fa      	ldrh	r2, [r7, #6]
 8002e52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e5e:	d108      	bne.n	8002e72 <HAL_UART_Transmit+0x6c>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d104      	bne.n	8002e72 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	e003      	b.n	8002e7a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e7a:	e02c      	b.n	8002ed6 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2200      	movs	r2, #0
 8002e84:	2180      	movs	r1, #128	; 0x80
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fc6b 	bl	8003762 <UART_WaitOnFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e039      	b.n	8002f0a <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10b      	bne.n	8002eb4 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eaa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	3302      	adds	r3, #2
 8002eb0:	61bb      	str	r3, [r7, #24]
 8002eb2:	e007      	b.n	8002ec4 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	781a      	ldrb	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1cc      	bne.n	8002e7c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2140      	movs	r1, #64	; 0x40
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fc38 	bl	8003762 <UART_WaitOnFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e006      	b.n	8002f0a <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e000      	b.n	8002f0a <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8002f08:	2302      	movs	r3, #2
  }
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3720      	adds	r7, #32
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b08a      	sub	sp, #40	; 0x28
 8002f16:	af02      	add	r7, sp, #8
 8002f18:	60f8      	str	r0, [r7, #12]
 8002f1a:	60b9      	str	r1, [r7, #8]
 8002f1c:	603b      	str	r3, [r7, #0]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	f040 80b1 	bne.w	8003090 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <HAL_UART_Receive+0x28>
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e0a9      	b.n	8003092 <HAL_UART_Receive+0x180>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2222      	movs	r2, #34	; 0x22
 8002f4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f54:	f7fe f99a 	bl	800128c <HAL_GetTick>
 8002f58:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	88fa      	ldrh	r2, [r7, #6]
 8002f5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	88fa      	ldrh	r2, [r7, #6]
 8002f66:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f72:	d10e      	bne.n	8002f92 <HAL_UART_Receive+0x80>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d105      	bne.n	8002f88 <HAL_UART_Receive+0x76>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002f82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002f86:	e02d      	b.n	8002fe4 <HAL_UART_Receive+0xd2>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	22ff      	movs	r2, #255	; 0xff
 8002f8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002f90:	e028      	b.n	8002fe4 <HAL_UART_Receive+0xd2>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10d      	bne.n	8002fb6 <HAL_UART_Receive+0xa4>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d104      	bne.n	8002fac <HAL_UART_Receive+0x9a>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	22ff      	movs	r2, #255	; 0xff
 8002fa6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002faa:	e01b      	b.n	8002fe4 <HAL_UART_Receive+0xd2>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	227f      	movs	r2, #127	; 0x7f
 8002fb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002fb4:	e016      	b.n	8002fe4 <HAL_UART_Receive+0xd2>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fbe:	d10d      	bne.n	8002fdc <HAL_UART_Receive+0xca>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d104      	bne.n	8002fd2 <HAL_UART_Receive+0xc0>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	227f      	movs	r2, #127	; 0x7f
 8002fcc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002fd0:	e008      	b.n	8002fe4 <HAL_UART_Receive+0xd2>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	223f      	movs	r2, #63	; 0x3f
 8002fd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8002fda:	e003      	b.n	8002fe4 <HAL_UART_Receive+0xd2>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8002fea:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff4:	d108      	bne.n	8003008 <HAL_UART_Receive+0xf6>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d104      	bne.n	8003008 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	61bb      	str	r3, [r7, #24]
 8003006:	e003      	b.n	8003010 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800300c:	2300      	movs	r3, #0
 800300e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003010:	e032      	b.n	8003078 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2200      	movs	r2, #0
 800301a:	2120      	movs	r1, #32
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fba0 	bl	8003762 <UART_WaitOnFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e032      	b.n	8003092 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10c      	bne.n	800304c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	b29a      	uxth	r2, r3
 800303a:	8a7b      	ldrh	r3, [r7, #18]
 800303c:	4013      	ands	r3, r2
 800303e:	b29a      	uxth	r2, r3
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	3302      	adds	r3, #2
 8003048:	61bb      	str	r3, [r7, #24]
 800304a:	e00c      	b.n	8003066 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003052:	b2da      	uxtb	r2, r3
 8003054:	8a7b      	ldrh	r3, [r7, #18]
 8003056:	b2db      	uxtb	r3, r3
 8003058:	4013      	ands	r3, r2
 800305a:	b2da      	uxtb	r2, r3
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	3301      	adds	r3, #1
 8003064:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800306c:	b29b      	uxth	r3, r3
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1c6      	bne.n	8003012 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	e000      	b.n	8003092 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8003090:	2302      	movs	r3, #2
  }
}
 8003092:	4618      	mov	r0, r3
 8003094:	3720      	adds	r7, #32
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800309c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030a0:	b08c      	sub	sp, #48	; 0x30
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	431a      	orrs	r2, r3
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	4b94      	ldr	r3, [pc, #592]	; (800331c <UART_SetConfig+0x280>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	6812      	ldr	r2, [r2, #0]
 80030d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030d4:	430b      	orrs	r3, r1
 80030d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a89      	ldr	r2, [pc, #548]	; (8003320 <UART_SetConfig+0x284>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d004      	beq.n	8003108 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003104:	4313      	orrs	r3, r2
 8003106:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003112:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	6812      	ldr	r2, [r2, #0]
 800311a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800311c:	430b      	orrs	r3, r1
 800311e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	f023 010f 	bic.w	r1, r3, #15
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	430a      	orrs	r2, r1
 8003134:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a7a      	ldr	r2, [pc, #488]	; (8003324 <UART_SetConfig+0x288>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d127      	bne.n	8003190 <UART_SetConfig+0xf4>
 8003140:	2003      	movs	r0, #3
 8003142:	f7ff fdef 	bl	8002d24 <LL_RCC_GetUSARTClockSource>
 8003146:	4603      	mov	r3, r0
 8003148:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800314c:	2b03      	cmp	r3, #3
 800314e:	d81b      	bhi.n	8003188 <UART_SetConfig+0xec>
 8003150:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <UART_SetConfig+0xbc>)
 8003152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003156:	bf00      	nop
 8003158:	08003169 	.word	0x08003169
 800315c:	08003179 	.word	0x08003179
 8003160:	08003171 	.word	0x08003171
 8003164:	08003181 	.word	0x08003181
 8003168:	2301      	movs	r3, #1
 800316a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800316e:	e080      	b.n	8003272 <UART_SetConfig+0x1d6>
 8003170:	2302      	movs	r3, #2
 8003172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003176:	e07c      	b.n	8003272 <UART_SetConfig+0x1d6>
 8003178:	2304      	movs	r3, #4
 800317a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800317e:	e078      	b.n	8003272 <UART_SetConfig+0x1d6>
 8003180:	2308      	movs	r3, #8
 8003182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003186:	e074      	b.n	8003272 <UART_SetConfig+0x1d6>
 8003188:	2310      	movs	r3, #16
 800318a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800318e:	e070      	b.n	8003272 <UART_SetConfig+0x1d6>
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a64      	ldr	r2, [pc, #400]	; (8003328 <UART_SetConfig+0x28c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d138      	bne.n	800320c <UART_SetConfig+0x170>
 800319a:	200c      	movs	r0, #12
 800319c:	f7ff fdc2 	bl	8002d24 <LL_RCC_GetUSARTClockSource>
 80031a0:	4603      	mov	r3, r0
 80031a2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80031a6:	2b0c      	cmp	r3, #12
 80031a8:	d82c      	bhi.n	8003204 <UART_SetConfig+0x168>
 80031aa:	a201      	add	r2, pc, #4	; (adr r2, 80031b0 <UART_SetConfig+0x114>)
 80031ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b0:	080031e5 	.word	0x080031e5
 80031b4:	08003205 	.word	0x08003205
 80031b8:	08003205 	.word	0x08003205
 80031bc:	08003205 	.word	0x08003205
 80031c0:	080031f5 	.word	0x080031f5
 80031c4:	08003205 	.word	0x08003205
 80031c8:	08003205 	.word	0x08003205
 80031cc:	08003205 	.word	0x08003205
 80031d0:	080031ed 	.word	0x080031ed
 80031d4:	08003205 	.word	0x08003205
 80031d8:	08003205 	.word	0x08003205
 80031dc:	08003205 	.word	0x08003205
 80031e0:	080031fd 	.word	0x080031fd
 80031e4:	2300      	movs	r3, #0
 80031e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ea:	e042      	b.n	8003272 <UART_SetConfig+0x1d6>
 80031ec:	2302      	movs	r3, #2
 80031ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031f2:	e03e      	b.n	8003272 <UART_SetConfig+0x1d6>
 80031f4:	2304      	movs	r3, #4
 80031f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031fa:	e03a      	b.n	8003272 <UART_SetConfig+0x1d6>
 80031fc:	2308      	movs	r3, #8
 80031fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003202:	e036      	b.n	8003272 <UART_SetConfig+0x1d6>
 8003204:	2310      	movs	r3, #16
 8003206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800320a:	e032      	b.n	8003272 <UART_SetConfig+0x1d6>
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a43      	ldr	r2, [pc, #268]	; (8003320 <UART_SetConfig+0x284>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d12a      	bne.n	800326c <UART_SetConfig+0x1d0>
 8003216:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800321a:	f7ff fd95 	bl	8002d48 <LL_RCC_GetLPUARTClockSource>
 800321e:	4603      	mov	r3, r0
 8003220:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003224:	d01a      	beq.n	800325c <UART_SetConfig+0x1c0>
 8003226:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800322a:	d81b      	bhi.n	8003264 <UART_SetConfig+0x1c8>
 800322c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003230:	d00c      	beq.n	800324c <UART_SetConfig+0x1b0>
 8003232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003236:	d815      	bhi.n	8003264 <UART_SetConfig+0x1c8>
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <UART_SetConfig+0x1a8>
 800323c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003240:	d008      	beq.n	8003254 <UART_SetConfig+0x1b8>
 8003242:	e00f      	b.n	8003264 <UART_SetConfig+0x1c8>
 8003244:	2300      	movs	r3, #0
 8003246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800324a:	e012      	b.n	8003272 <UART_SetConfig+0x1d6>
 800324c:	2302      	movs	r3, #2
 800324e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003252:	e00e      	b.n	8003272 <UART_SetConfig+0x1d6>
 8003254:	2304      	movs	r3, #4
 8003256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800325a:	e00a      	b.n	8003272 <UART_SetConfig+0x1d6>
 800325c:	2308      	movs	r3, #8
 800325e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003262:	e006      	b.n	8003272 <UART_SetConfig+0x1d6>
 8003264:	2310      	movs	r3, #16
 8003266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800326a:	e002      	b.n	8003272 <UART_SetConfig+0x1d6>
 800326c:	2310      	movs	r3, #16
 800326e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a2a      	ldr	r2, [pc, #168]	; (8003320 <UART_SetConfig+0x284>)
 8003278:	4293      	cmp	r3, r2
 800327a:	f040 80a4 	bne.w	80033c6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800327e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003282:	2b08      	cmp	r3, #8
 8003284:	d823      	bhi.n	80032ce <UART_SetConfig+0x232>
 8003286:	a201      	add	r2, pc, #4	; (adr r2, 800328c <UART_SetConfig+0x1f0>)
 8003288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328c:	080032b1 	.word	0x080032b1
 8003290:	080032cf 	.word	0x080032cf
 8003294:	080032b9 	.word	0x080032b9
 8003298:	080032cf 	.word	0x080032cf
 800329c:	080032bf 	.word	0x080032bf
 80032a0:	080032cf 	.word	0x080032cf
 80032a4:	080032cf 	.word	0x080032cf
 80032a8:	080032cf 	.word	0x080032cf
 80032ac:	080032c7 	.word	0x080032c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b0:	f7ff fa54 	bl	800275c <HAL_RCC_GetPCLK1Freq>
 80032b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032b6:	e010      	b.n	80032da <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032b8:	4b1c      	ldr	r3, [pc, #112]	; (800332c <UART_SetConfig+0x290>)
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032bc:	e00d      	b.n	80032da <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032be:	f7ff f999 	bl	80025f4 <HAL_RCC_GetSysClockFreq>
 80032c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032c4:	e009      	b.n	80032da <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032cc:	e005      	b.n	80032da <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80032d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 8137 	beq.w	8003550 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	4a12      	ldr	r2, [pc, #72]	; (8003330 <UART_SetConfig+0x294>)
 80032e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032ec:	461a      	mov	r2, r3
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	4413      	add	r3, r2
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	429a      	cmp	r2, r3
 8003304:	d305      	bcc.n	8003312 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	429a      	cmp	r2, r3
 8003310:	d910      	bls.n	8003334 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003318:	e11a      	b.n	8003550 <UART_SetConfig+0x4b4>
 800331a:	bf00      	nop
 800331c:	cfff69f3 	.word	0xcfff69f3
 8003320:	40008000 	.word	0x40008000
 8003324:	40013800 	.word	0x40013800
 8003328:	40004400 	.word	0x40004400
 800332c:	00f42400 	.word	0x00f42400
 8003330:	08003e20 	.word	0x08003e20
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	2200      	movs	r2, #0
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	60fa      	str	r2, [r7, #12]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	4a8e      	ldr	r2, [pc, #568]	; (800357c <UART_SetConfig+0x4e0>)
 8003342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003346:	b29b      	uxth	r3, r3
 8003348:	2200      	movs	r2, #0
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	607a      	str	r2, [r7, #4]
 800334e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003352:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003356:	f7fc ff0f 	bl	8000178 <__aeabi_uldivmod>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4610      	mov	r0, r2
 8003360:	4619      	mov	r1, r3
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	020b      	lsls	r3, r1, #8
 800336c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003370:	0202      	lsls	r2, r0, #8
 8003372:	6979      	ldr	r1, [r7, #20]
 8003374:	6849      	ldr	r1, [r1, #4]
 8003376:	0849      	lsrs	r1, r1, #1
 8003378:	2000      	movs	r0, #0
 800337a:	460c      	mov	r4, r1
 800337c:	4605      	mov	r5, r0
 800337e:	eb12 0804 	adds.w	r8, r2, r4
 8003382:	eb43 0905 	adc.w	r9, r3, r5
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	469a      	mov	sl, r3
 800338e:	4693      	mov	fp, r2
 8003390:	4652      	mov	r2, sl
 8003392:	465b      	mov	r3, fp
 8003394:	4640      	mov	r0, r8
 8003396:	4649      	mov	r1, r9
 8003398:	f7fc feee 	bl	8000178 <__aeabi_uldivmod>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4613      	mov	r3, r2
 80033a2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033aa:	d308      	bcc.n	80033be <UART_SetConfig+0x322>
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033b2:	d204      	bcs.n	80033be <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6a3a      	ldr	r2, [r7, #32]
 80033ba:	60da      	str	r2, [r3, #12]
 80033bc:	e0c8      	b.n	8003550 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80033c4:	e0c4      	b.n	8003550 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ce:	d167      	bne.n	80034a0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80033d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d828      	bhi.n	800342a <UART_SetConfig+0x38e>
 80033d8:	a201      	add	r2, pc, #4	; (adr r2, 80033e0 <UART_SetConfig+0x344>)
 80033da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033de:	bf00      	nop
 80033e0:	08003405 	.word	0x08003405
 80033e4:	0800340d 	.word	0x0800340d
 80033e8:	08003415 	.word	0x08003415
 80033ec:	0800342b 	.word	0x0800342b
 80033f0:	0800341b 	.word	0x0800341b
 80033f4:	0800342b 	.word	0x0800342b
 80033f8:	0800342b 	.word	0x0800342b
 80033fc:	0800342b 	.word	0x0800342b
 8003400:	08003423 	.word	0x08003423
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003404:	f7ff f9aa 	bl	800275c <HAL_RCC_GetPCLK1Freq>
 8003408:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800340a:	e014      	b.n	8003436 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800340c:	f7ff f9b8 	bl	8002780 <HAL_RCC_GetPCLK2Freq>
 8003410:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003412:	e010      	b.n	8003436 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003414:	4b5a      	ldr	r3, [pc, #360]	; (8003580 <UART_SetConfig+0x4e4>)
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003418:	e00d      	b.n	8003436 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800341a:	f7ff f8eb 	bl	80025f4 <HAL_RCC_GetSysClockFreq>
 800341e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003420:	e009      	b.n	8003436 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003428:	e005      	b.n	8003436 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003434:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 8089 	beq.w	8003550 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	4a4e      	ldr	r2, [pc, #312]	; (800357c <UART_SetConfig+0x4e0>)
 8003444:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003448:	461a      	mov	r2, r3
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003450:	005a      	lsls	r2, r3, #1
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	085b      	lsrs	r3, r3, #1
 8003458:	441a      	add	r2, r3
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003462:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	2b0f      	cmp	r3, #15
 8003468:	d916      	bls.n	8003498 <UART_SetConfig+0x3fc>
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003470:	d212      	bcs.n	8003498 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003472:	6a3b      	ldr	r3, [r7, #32]
 8003474:	b29b      	uxth	r3, r3
 8003476:	f023 030f 	bic.w	r3, r3, #15
 800347a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	085b      	lsrs	r3, r3, #1
 8003480:	b29b      	uxth	r3, r3
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	b29a      	uxth	r2, r3
 8003488:	8bfb      	ldrh	r3, [r7, #30]
 800348a:	4313      	orrs	r3, r2
 800348c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	8bfa      	ldrh	r2, [r7, #30]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	e05b      	b.n	8003550 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800349e:	e057      	b.n	8003550 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d828      	bhi.n	80034fa <UART_SetConfig+0x45e>
 80034a8:	a201      	add	r2, pc, #4	; (adr r2, 80034b0 <UART_SetConfig+0x414>)
 80034aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ae:	bf00      	nop
 80034b0:	080034d5 	.word	0x080034d5
 80034b4:	080034dd 	.word	0x080034dd
 80034b8:	080034e5 	.word	0x080034e5
 80034bc:	080034fb 	.word	0x080034fb
 80034c0:	080034eb 	.word	0x080034eb
 80034c4:	080034fb 	.word	0x080034fb
 80034c8:	080034fb 	.word	0x080034fb
 80034cc:	080034fb 	.word	0x080034fb
 80034d0:	080034f3 	.word	0x080034f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034d4:	f7ff f942 	bl	800275c <HAL_RCC_GetPCLK1Freq>
 80034d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034da:	e014      	b.n	8003506 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034dc:	f7ff f950 	bl	8002780 <HAL_RCC_GetPCLK2Freq>
 80034e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034e2:	e010      	b.n	8003506 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034e4:	4b26      	ldr	r3, [pc, #152]	; (8003580 <UART_SetConfig+0x4e4>)
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034e8:	e00d      	b.n	8003506 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ea:	f7ff f883 	bl	80025f4 <HAL_RCC_GetSysClockFreq>
 80034ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034f0:	e009      	b.n	8003506 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034f8:	e005      	b.n	8003506 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003504:	bf00      	nop
    }

    if (pclk != 0U)
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	2b00      	cmp	r3, #0
 800350a:	d021      	beq.n	8003550 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	4a1a      	ldr	r2, [pc, #104]	; (800357c <UART_SetConfig+0x4e0>)
 8003512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003516:	461a      	mov	r2, r3
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	fbb3 f2f2 	udiv	r2, r3, r2
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	085b      	lsrs	r3, r3, #1
 8003524:	441a      	add	r2, r3
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	fbb2 f3f3 	udiv	r3, r2, r3
 800352e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	2b0f      	cmp	r3, #15
 8003534:	d909      	bls.n	800354a <UART_SetConfig+0x4ae>
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353c:	d205      	bcs.n	800354a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	b29a      	uxth	r2, r3
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60da      	str	r2, [r3, #12]
 8003548:	e002      	b.n	8003550 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2201      	movs	r2, #1
 8003554:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	2201      	movs	r2, #1
 800355c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	2200      	movs	r2, #0
 8003564:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2200      	movs	r2, #0
 800356a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800356c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003570:	4618      	mov	r0, r3
 8003572:	3730      	adds	r7, #48	; 0x30
 8003574:	46bd      	mov	sp, r7
 8003576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800357a:	bf00      	nop
 800357c:	08003e20 	.word	0x08003e20
 8003580:	00f42400 	.word	0x00f42400

08003584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003660:	2b00      	cmp	r3, #0
 8003662:	d01a      	beq.n	800369a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003682:	d10a      	bne.n	800369a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	605a      	str	r2, [r3, #4]
  }
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr

080036c6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af02      	add	r7, sp, #8
 80036cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036d6:	f7fd fdd9 	bl	800128c <HAL_GetTick>
 80036da:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d10e      	bne.n	8003708 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f832 	bl	8003762 <UART_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d001      	beq.n	8003708 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e028      	b.n	800375a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b04      	cmp	r3, #4
 8003714:	d10e      	bne.n	8003734 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003716:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f81c 	bl	8003762 <UART_WaitOnFlagUntilTimeout>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e012      	b.n	800375a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b09c      	sub	sp, #112	; 0x70
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	603b      	str	r3, [r7, #0]
 800376e:	4613      	mov	r3, r2
 8003770:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003772:	e0a9      	b.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003774:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377a:	f000 80a5 	beq.w	80038c8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377e:	f7fd fd85 	bl	800128c <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800378a:	429a      	cmp	r2, r3
 800378c:	d302      	bcc.n	8003794 <UART_WaitOnFlagUntilTimeout+0x32>
 800378e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003790:	2b00      	cmp	r3, #0
 8003792:	d140      	bne.n	8003816 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800379c:	e853 3f00 	ldrex	r3, [r3]
 80037a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037a8:	667b      	str	r3, [r7, #100]	; 0x64
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037ba:	e841 2300 	strex	r3, r2, [r1]
 80037be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1e6      	bne.n	8003794 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3308      	adds	r3, #8
 80037cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d0:	e853 3f00 	ldrex	r3, [r3]
 80037d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d8:	f023 0301 	bic.w	r3, r3, #1
 80037dc:	663b      	str	r3, [r7, #96]	; 0x60
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3308      	adds	r3, #8
 80037e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80037e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e5      	bne.n	80037c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e069      	b.n	80038ea <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d051      	beq.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800382e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003832:	d149      	bne.n	80038c8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800383c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003846:	e853 3f00 	ldrex	r3, [r3]
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003852:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	461a      	mov	r2, r3
 800385a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800385c:	637b      	str	r3, [r7, #52]	; 0x34
 800385e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003860:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003862:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003864:	e841 2300 	strex	r3, r2, [r1]
 8003868:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800386a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1e6      	bne.n	800383e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3308      	adds	r3, #8
 8003876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	e853 3f00 	ldrex	r3, [r3]
 800387e:	613b      	str	r3, [r7, #16]
   return(result);
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f023 0301 	bic.w	r3, r3, #1
 8003886:	66bb      	str	r3, [r7, #104]	; 0x68
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3308      	adds	r3, #8
 800388e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003890:	623a      	str	r2, [r7, #32]
 8003892:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003894:	69f9      	ldr	r1, [r7, #28]
 8003896:	6a3a      	ldr	r2, [r7, #32]
 8003898:	e841 2300 	strex	r3, r2, [r1]
 800389c:	61bb      	str	r3, [r7, #24]
   return(result);
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e5      	bne.n	8003870 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e010      	b.n	80038ea <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69da      	ldr	r2, [r3, #28]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4013      	ands	r3, r2
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	79fb      	ldrb	r3, [r7, #7]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	f43f af46 	beq.w	8003774 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3770      	adds	r7, #112	; 0x70
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b085      	sub	sp, #20
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003900:	2b01      	cmp	r3, #1
 8003902:	d101      	bne.n	8003908 <HAL_UARTEx_DisableFifoMode+0x16>
 8003904:	2302      	movs	r3, #2
 8003906:	e027      	b.n	8003958 <HAL_UARTEx_DisableFifoMode+0x66>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2224      	movs	r2, #36	; 0x24
 8003914:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003936:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr

08003962 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003976:	2302      	movs	r3, #2
 8003978:	e02d      	b.n	80039d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2224      	movs	r2, #36	; 0x24
 8003986:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0201 	bic.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f850 	bl	8003a5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e02d      	b.n	8003a52 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2224      	movs	r2, #36	; 0x24
 8003a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0201 	bic.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f812 	bl	8003a5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d108      	bne.n	8003a7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003a7c:	e031      	b.n	8003ae2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003a7e:	2308      	movs	r3, #8
 8003a80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003a82:	2308      	movs	r3, #8
 8003a84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	0e5b      	lsrs	r3, r3, #25
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	0f5b      	lsrs	r3, r3, #29
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003aa6:	7bbb      	ldrb	r3, [r7, #14]
 8003aa8:	7b3a      	ldrb	r2, [r7, #12]
 8003aaa:	4910      	ldr	r1, [pc, #64]	; (8003aec <UARTEx_SetNbDataToProcess+0x90>)
 8003aac:	5c8a      	ldrb	r2, [r1, r2]
 8003aae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003ab2:	7b3a      	ldrb	r2, [r7, #12]
 8003ab4:	490e      	ldr	r1, [pc, #56]	; (8003af0 <UARTEx_SetNbDataToProcess+0x94>)
 8003ab6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003ab8:	fb93 f3f2 	sdiv	r3, r3, r2
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	7b7a      	ldrb	r2, [r7, #13]
 8003ac8:	4908      	ldr	r1, [pc, #32]	; (8003aec <UARTEx_SetNbDataToProcess+0x90>)
 8003aca:	5c8a      	ldrb	r2, [r1, r2]
 8003acc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003ad0:	7b7a      	ldrb	r2, [r7, #13]
 8003ad2:	4907      	ldr	r1, [pc, #28]	; (8003af0 <UARTEx_SetNbDataToProcess+0x94>)
 8003ad4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ad6:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003ae2:	bf00      	nop
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr
 8003aec:	08003e38 	.word	0x08003e38
 8003af0:	08003e40 	.word	0x08003e40

08003af4 <__libc_init_array>:
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	4d0d      	ldr	r5, [pc, #52]	; (8003b2c <__libc_init_array+0x38>)
 8003af8:	4c0d      	ldr	r4, [pc, #52]	; (8003b30 <__libc_init_array+0x3c>)
 8003afa:	1b64      	subs	r4, r4, r5
 8003afc:	10a4      	asrs	r4, r4, #2
 8003afe:	2600      	movs	r6, #0
 8003b00:	42a6      	cmp	r6, r4
 8003b02:	d109      	bne.n	8003b18 <__libc_init_array+0x24>
 8003b04:	4d0b      	ldr	r5, [pc, #44]	; (8003b34 <__libc_init_array+0x40>)
 8003b06:	4c0c      	ldr	r4, [pc, #48]	; (8003b38 <__libc_init_array+0x44>)
 8003b08:	f000 f820 	bl	8003b4c <_init>
 8003b0c:	1b64      	subs	r4, r4, r5
 8003b0e:	10a4      	asrs	r4, r4, #2
 8003b10:	2600      	movs	r6, #0
 8003b12:	42a6      	cmp	r6, r4
 8003b14:	d105      	bne.n	8003b22 <__libc_init_array+0x2e>
 8003b16:	bd70      	pop	{r4, r5, r6, pc}
 8003b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b1c:	4798      	blx	r3
 8003b1e:	3601      	adds	r6, #1
 8003b20:	e7ee      	b.n	8003b00 <__libc_init_array+0xc>
 8003b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b26:	4798      	blx	r3
 8003b28:	3601      	adds	r6, #1
 8003b2a:	e7f2      	b.n	8003b12 <__libc_init_array+0x1e>
 8003b2c:	08003e50 	.word	0x08003e50
 8003b30:	08003e50 	.word	0x08003e50
 8003b34:	08003e50 	.word	0x08003e50
 8003b38:	08003e54 	.word	0x08003e54

08003b3c <memset>:
 8003b3c:	4402      	add	r2, r0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d100      	bne.n	8003b46 <memset+0xa>
 8003b44:	4770      	bx	lr
 8003b46:	f803 1b01 	strb.w	r1, [r3], #1
 8003b4a:	e7f9      	b.n	8003b40 <memset+0x4>

08003b4c <_init>:
 8003b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4e:	bf00      	nop
 8003b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b52:	bc08      	pop	{r3}
 8003b54:	469e      	mov	lr, r3
 8003b56:	4770      	bx	lr

08003b58 <_fini>:
 8003b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5a:	bf00      	nop
 8003b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5e:	bc08      	pop	{r3}
 8003b60:	469e      	mov	lr, r3
 8003b62:	4770      	bx	lr
